(function(){const pages=[{"idx":0,"href":"/notebook/docs/","title":"About","content":"About  Masaki E. Tsuda 津田 真樹（つだ　まさき） Twitter : teuder  "},{"idx":1,"href":"/notebook/python/","title":"Python","content":"Python "},{"idx":2,"href":"/notebook/r/","title":"R","content":"R コーディングスタイル The tidyverse style guide\nソースコードを確認 lookup パッケージ\ndevtools::install_github(\u0026quot;jimhester/lookup\u0026quot;) lookup::lookup(dplyr::summarise) バージョン管理  RSwitch R本体のバージョン管理 https://twitter.com/hrbrmstr renv, packrat : パッケージのバージョン管理  並列計算 furrr : purrr と同様の使い方で並列に計算できる\n可視化 Data to Viz\nインストール Ubuntu  UBUNTU PACKAGES FOR R Ubuntuに最新版のRをインストールする  環境設定 環境変数 Sys.getenv() Sys.setenv(\u0026quot;LANGUAGE\u0026quot;=\u0026quot;ja_Jp.UTF-8\u0026quot;) 環境設定ファイル ユーザーごとのRの設定ファイルは（Rが思っている）ユーザーのホームディレクトリ R_USER に配置しておくとよい。\n\u0026gt; Sys.getenv(\u0026quot;R_USER\u0026quot;) [1] \u0026quot;C:/Users/tsuda/Documents\u0026quot; .Renviron 環境変数を指定するシェルスクリプト\nR_USER=${HOME}/.R R_LIBS_USER=${R_USER}/library R_ENVIRON_USER=${R_USER}/.Renviron R_PROFILE_USER=${R_USER}/.Rprofile R_HISTFILE=${R_USER}/.Rhistory R_HISTSIZE=65535 LANG=C LC_CTYPE=en_US.UTF-8 .Rprofile Rの起動時や終了時に実行したいRのスクリプト\nhttps://cran.r-project.org/doc/manuals/R-intro.html#Customizing-the-environment\n~/.R/Makevars https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Using-Makevars\nCC=/opt/local/bin/gcc-mp-4.7 CXX=/opt/local/bin/g++-mp-4.7 CPLUS_INCLUDE_PATH=/opt/local/include:$CPLUS_INCLUDE_PATH LD_LIBRARY_PATH=/opt/local/lib:$LD_LIBRARY_PATH CXXFLAGS= -g0 -O3 -Wall MAKE=make -j4 ロケール、文字コード ロケールを指定する文字列 ロケールとは表示する言語・文字コードや数字や時刻の表示形式を変更するための設定のこと\n R manual: Locale WindowsでRのロケールを設定するときのメモ  次の３つの情報を指定する文字列\n 言語 ja 領域 jp 文字コード utf-8  ロケールの指定形式はOSにより異なる\n Windows  Japanese_Japan.932 日本語、日本国、Windows拡張Shift-JIS（コードページ932） English_United States.1252 省略した入力として Japanese English でも良い（エンコーディングはデフォルトで言語だけ変えたいとき）   Mac, Linux  ja_JP.UTF-8 en_US.UTF-8    環境変数 メッセージを変えたいだけなら .Renviron ファイルの中で LANGUAGE 環境変数を設定する\n.Renviron\nLANGUAGE=English #LANGUAGE=Japanese 表示されるメッセージの言語は、最初に環境変数 LANGUAGE の設定が読まれる。次に LC_ALL, LC_MESSAGES and LANG\nRでロケールに関連する環境変数\n LC_MESSAGES : R で表示されるメッセージの設定 LC_COLLATE : 並び換えや正規表現に用いる文字の照合順序に影響します。 LC_CTYPE : 文字の判定・操作・文字数のカウントなどに影響します。 LC_MONETARY : 金額に関連する数値、通貨記号の表示に影響します。 LC_NUMERIC : 金額に関係しない数値の表示（小数の区切り文字など）に影響します。 LC_TIME : 日付と時刻の表示に影響します。 LC_ALL : これが設定されていると他のロケール設定（LC_*）よりも優先して、こちらの設定が使われる   Sys.setlocale(\u0026quot;LC_MESSAGES\u0026quot;, \u0026quot;English\u0026quot;) 現在のロケールを確認する（windows）\n\u0026gt; Sys.getlocale() [1] \u0026#34;LC_COLLATE=Japanese_Japan.932;LC_CTYPE=English_United States.1252;LC_MONETARY=Japanese_Japan.932;LC_NUMERIC=C;LC_TIME=Japanese_Japan.932\u0026#34; Ubuntu でロケールを表示してみた。　ロケールに関連する環境変数はもっと多い\n$ locale LANG=ja_JP.UTF-8 LANGUAGE= LC_CTYPE=\u0026quot;ja_JP.UTF-8\u0026quot; LC_NUMERIC=\u0026quot;ja_JP.UTF-8\u0026quot; LC_TIME=\u0026quot;ja_JP.UTF-8\u0026quot; LC_COLLATE=\u0026quot;ja_JP.UTF-8\u0026quot; LC_MONETARY=\u0026quot;ja_JP.UTF-8\u0026quot; LC_MESSAGES=\u0026quot;ja_JP.UTF-8\u0026quot; LC_PAPER=\u0026quot;ja_JP.UTF-8\u0026quot; LC_NAME=\u0026quot;ja_JP.UTF-8\u0026quot; LC_ADDRESS=\u0026quot;ja_JP.UTF-8\u0026quot; LC_TELEPHONE=\u0026quot;ja_JP.UTF-8\u0026quot; LC_MEASUREMENT=\u0026quot;ja_JP.UTF-8\u0026quot; LC_IDENTIFICATION=\u0026quot;ja_JP.UTF-8\u0026quot; LC_ALL=ja_JP.UTF-8 きになるパッケージ 可視化  gganimate : gifアニメ export : ggplotオブジェクトをパワポに変換する ggridge 複数のヒストグラム比べるやつ  オブジェクトを調べる class() typeof() mode()\nstr() attributes()\n"},{"idx":3,"href":"/notebook/gis/bigquerygis/","title":"BigQuery GIS","content":"BigQuery GIS BigQuery標準SQLの地理関数\n"},{"idx":4,"href":"/notebook/gis/sar/","title":"SAR","content":"SAR 合成開口レーダ（SAR）のキホン～事例、分かること、センサ、衛星、波長～\n合成開口レーザー（SAR:Synthetic Aperture Radar）は、マイクロ波を発射し、地表で跳ね返ってきたマイクロ波をとらえるセンサ\nざらざらした表面ほど多く電波が返ってきて白くみえ、水面などつるつるした表面では電波が反射してしまうため黒く見えます。\n観測周波数（バンド）、周波数の違いによって、何に反射して跳ね返ってくるかが異なる。\nよく用いられるのは Lバンド（1〜2GHz）、 Cバンド(4〜8GHz)、Xバンド(8〜12GHz)の3つで順番に波長が短くなっていきます。\n偏波、偏光と同じで、電磁波も波の傾きがある。物体によって偏波に対する反射特性が異なるので、物体の識別に使える\n衛星に搭載されるセンサーにより、発信する電波の傾き、受信する電波の傾きが異なる\n HH : 水平偏波で電波を出して水平で受けること HV : 水平偏波で電波を出して垂直で受けること VH : 垂直偏波で電波を出して水平で受けること VV : 垂直偏波で電波を出して垂直で受けること  "},{"idx":5,"href":"/notebook/gis/terminology/","title":"用語","content":"用語  Panchromatic PAN 白黒の画像 Multispectral カラー画像 可視光 Visible VIS 近赤外線 Near InfraRed NIR 可視光と近赤外線をまとめて VNIR バンド センサーが感受する電磁波の波長帯域、バンドによって見えるものが違う  センサー  合成開口レーダー SAR VIIRS  "},{"idx":6,"href":"/notebook/gis/viirs/","title":"VIIRS","content":"VIIRS Visible Infrared Imaging Radiometer Suite\n赤外線〜可視光を含む波長の光を受信する22個のセンサーからなる装置。様々な波長で観測することにより地表や海洋の色や夜間の光を観測する。雲、エアロゾル、氷、海の色、植生、夜間光などの分析に利用できる。\nSuomi-NPP（SNPP）, NOAA-20(JPSS-1)の２つの衛星に搭載されている。どちらの衛星もNASAとNOAAの共同プロジェクト Joint Polar Satellite System (JPSS) により打ち上げられ運用されている。（NOAA-20 と JPSS-1は同じ衛星、JPSS-1 から NOAA-20 に名前が変わった。SNPP は JPSS-1のための実験衛星という位置付けらしい。）\nSNPPのデータは2012年から利用可能で、VIIRSを搭載した衛星は今後しばらく（2030以降まで）は運用を続けられる予定。\n衛星 Suomi-NPP https://www.restec.or.jp/satellite/suomi-npp https://directory.eoportal.org/web/eoportal/satellite-missions/s/suomi-npp\n回帰日数（repeat cycle）は 16 日と書いてあるけど、CLASSのデータの範囲を見ると、2017-06-01 と 2017-06-12 はほぼ同じ地点を通過するので、周期は11日ではないのか？？\n準回帰軌道である。\n 太陽同期軌道(Sun-synchronous orbit)でもあるので、太陽同期準回帰軌道と言える。  Sun-synchronous near-circular polar orbit\nS-NPP衛星軌道情報\nNOAA-20 https://www.restec.or.jp/satellite/jpss-series\nVIIRS データ情報 VIIRSポータルサイト\n SNPP VIIRS NASA VIIRS LAND  最初にこれを読む\nBeginner Guide to VIIRS data\nこのドキュメントが、わかりやすくVIIRSのデータの詳細を理解するのに役だちそう\n VIIRS_SDR_Users_Guide v1.3  データプロダクト SNPPのデータは大きく３つに分けられる、一般ユーザーはSDRとEDRを使う\n RDR (Raw Data Records) : センサーから取得された生データ（一般ユーザーには必要ない） SDR (Sensor Data Records) : センサー値を適切に処理して得られた物理量や品質フラグなどのデータ（一般ユーザーにとっての生データ） EDR (Environmental Data Records) : センサーから得られた値をさらに加工して得られたデータ（雲マスク、植生など）  JPSSのサイトに、利用できるデータプロダクトの一覧がある https://www.star.nesdis.noaa.gov/jpss/JPSS_products.php\nデータのドキュメント JPSSの公式サイトにあるSNPPのドキュメント集\nJPSSのドキュメントがDataRefugeにある。 DataRefugeは環境や気候関係のデータのアーカイブを進めている？トランプ大統領が気候変動に関するデータの公開を制限しようとした時に対策として生まれた運動？？\nJPSSのデータフォーマットのドキュメントは Common Data Format Control Book - External (CDFCB-X) と呼ばれているらしい。VIIRSドキュメントのコードは 474 、VIIRSのデータフォーマットのドキュメントコードは 474-00001\n CDFCB-X Volume I: Overview  474-00001-01_JPSS-CDFCB-X-Vol-I_0124D 474-00001-01_jpss-cdfcb-x-vol-i_0200c.pdf こっちのが新しいらしい   CDFCB-X Volume II: Raw Data Record Formats CDFCB-X Volume III: Sensor Data Record/Temperature Data Record Formats CDFCB-X Volume IV: Environmental Data Record/Intermediate Product/Application Related Product Formats  CDFCB-X Volume IV Part 1: Overview, IPs, ARPs, and Common Geolocation Data CDFCB-X Volume IV Part 2: Imagery, Atmospheric, and Cloud EDRs CDFCB-X Volume IV Part 3: Land and Ocean/Water EDRs CDFCB-X Volume IV Part 4: Earth Radiation Budget and Space EDRs   CDFCB-X Volume V: Metadata CDFCB-X Volume VI: Ancillary Data, Auxiliary Data, Messages, and Reports CDFCB-X Volume VII: 廃止 CDFCB-X Volume VIII: Look Up Tables and Processing Coefficients  HDF5に格納されているデータの定義は以下のドキュメントにまとまっている\nJoint Polar Satellite System (JPSS) Algorithm Specification Volume II: Data Dictionary for VIIRS RDR/SDR\nHDF5ファイルに格納されているデータの定義については以下のドキュメントに概要がある\n VIIRS SDR Data format Joint Polar Satellite System (JPSS) Algorithm Specification Volume II: Data Dictionary for VIIRS RDR/SDR.  SDR I-band (SVI01 - SVI05) SVI01, SVI02, SVI03, SVI04, SVI05\n位置情報\n– GIMGO: projected onto smooth ellipsoid (WGS84 ellipsoid) – GITCO: parallax-corrected for terrain\nM-band (SVM01 - SVM16) SVM01, SVM02, SVM03, SVM04, SVM05, SVM06, SVM07, SVM08, SVM09, SVM10, SVM11, SVM12, SVM13, SVM14, SVM15, SVM16\n位置情報\n– GMODO: projected onto smooth ellipsoid – GMTCO: parallax-corrected for terrain\nDay Night Band (SVDNB) 全てのM-band (M1~M16)の波長のセンサーの信号を統合して（恐らく）、最も感度と強さのレンジを高めたプロダクト\nファイル記号 : SVDNB\n位置情報\n– GDNBO: projected onto smooth ellipsoid (as of May 2013 there is a discussion of whether or not to produce a terrain-corrected geolocation)\nEDR EDR User Guide\nI-band EDR I-band のSDR (SVI01, SVI02, SVI03, SVI04, SVI05) はそれぞれ対応するEDR (VI1BO, VI2BO, VI3BO, VI4BO, VI5BO) がある\nVI1BO, VI2BO, VI3BO, VI4BO, VI5BO\nM-band EDR M-band は６つのバンドについて対応するEDRがある\n SVM01 (SDR) \u0026ndash;\u0026gt; VM01O (EDR) reflectance SVM04 (SDR) \u0026ndash;\u0026gt; VM02O (EDR) reflectance SVM09 (SDR) \u0026ndash;\u0026gt; VM03O (EDR) reflectance SVM14 (SDR) \u0026ndash;\u0026gt; VM04O (EDR) brightness temperature SVM15 (SDR) \u0026ndash;\u0026gt; VM05O (EDR) brightness temperature SVM16 (SDR) \u0026ndash;\u0026gt; VM06O (EDR) brightness temperature  M-band EDR のための入力SDRは変更される可能性がある。EDRのメタデータ band_id を見ると、どのSDRが使われたのかわかる\nI-band M-band EDRs は SDR を the Ground-Track Mercator projection に再投影し直したもの\nDNB EDR DNBのEDRは Near-Constant Contrast (NCC) product と呼ばれる\nファイル記号 : VNCCO\n局所的な明るさを標準化して、夜と昼にかかわらず、光の反射率（reflectance）の分布を可視化する （理想的には、夜と昼にかかわらず同じような画像を出力するはずだが、技術的には難しい）\nDNB の EDRは、SDRの輝度を反射率に変換して、ground-track Mercator projection に再投影したもの、\nつまり、DNB の EDRは反射率 (reflectance) しか持っていない、DNB の SDR は輝度しか持っていない\n輝度（radiance）\n位置情報\n– GIGTO: I-band EDR geolocation – GMGTO: M-band EDR geolocation – GNCCO: Day/Night Band EDR (NCC) geolocation\nCloud Mask (VICMO) なぜか Cloud Mask EDR のデータ形式のドキュメントは、474-00001 の中にない！\nJPSS Algorithm Specification, Volume II: Data Dictionary for the Cloud Mask\n474-00448-02-11_JPSS-DD-Vol-II-Part-11_0200E.pdf\nファイル名は\nCloud Mask が EDR になったのは 2017 年から、それ以前は Cloud Mask Intermediate Product と呼ばれていた（ファイル名は IICMO）。基本的な内容は同じらしい\nIICMOのドキュメント\nは 474-00062_OAD-VIIRS-Cloud-Mask-IP_G.pdf\n生データ取得 ウィスコンシン 直近１週間分のデータ\nftp://ftp.ssec.wisc.edu/pub/eosdb/npp/viirs/\nNOAA CLASS SDR, EDRの生データを取得できるが、APIで自動取得することができない\u0026hellip;\n VIIRS SDR VIIRS EDS  NASA LAADS NOAA CLASS 同様のSDR/EDRが入手できるが、どうも何らかの処理が加えられているように見える。ただスクレイピングによりデータ取得を自動化できる。\n NASA LAADS VIIRS  VIIRS:Suomi-NPP    データプロダクト・サービス  Cololad School of Mines: Earth Observation Group : VIIRS  VIIRSを利用した、夜間の焱、夜間光（月次、年次）、夜間の漁船光の検出のデータを提供している 元々はNOAAのグループだったが Cololad School of Mines に移籍した。NOAA時代のサイト https://eogdata.mines.edu/wwwdata/viirs_products/vbd/v23/global-saa/current/ https://eogdata.mines.edu/wwwdata/viirs_products/vbd/v23/global-saa/nrt/    https://payneinstitute.mines.edu/eog/viirs/\nVIIRS を利用した論文 夜間の漁船光の検出  Automatic Boat Identification System for VIIRS Low Light Imaging Data Cross-Matching VIIRS Boat Detections with Vessel Monitoring System Tracks in Indonesia  一般記事 衛星が撮影した夜の地球「夜間光」がお金に変わる!? 概要と利用事例\n"},{"idx":7,"href":"/notebook/datascience/","title":"Data Science","content":"Data Science データ作成 drawdata.xyz\n手でグラフをお絵描きして対応するデータをダウンロードできる\n"},{"idx":8,"href":"/notebook/gis/","title":"GIS \u0026 Remote Sensing","content":"GIS \u0026amp; Remote Sensing 情報収集 ポータルサイト  JAXA 衛星利用推進サイト 宙畑 リモートセンシング技術センター  団体コミュニティ  Open Geospatial Consortium 地理情報関係の標準化団体 OSGeo.jp OSGeo4W WindowsのためにOSSのGIS関連ソフトをビルドしているらしい  学習サイト GIS  GIS基礎知識 Geocomputation with R Rでの地理情報解析の方法がめっちゃ充実、sfパッケージベース Spatial Data Science Spatio-Temporal Statistics with R Introduction to visualising spatial data in R 空間情報クラブ  CRS  PROJで利用できるCRSのリスト 地図投影法のリスト RSpatialGuides/OverviewCoordinateReferenceSystems どんな目的、スケールでどの投影法を使うかガイド 地域ごとの適切な投影法の検索エンジン？  リモセン  衛星観測の専門用語  データソース  STEP  ESAのポータルサイトらしい   MarineRegions.org 海洋関係の Shapefile を公開している GeoServer GeoNetwork Natural Earth 国土数値情報 OCEAN DATA VIEWER 気象データ高度利用ポータルサイト GISデータ入手先一覧  衛星データ  NOAA CLASS -NOAA CLASS Data access tutrial LAADS DAAC G-Portal  宇宙開発組織  NASA NOAA JAXA ESA  ファイル形式  GeoJSON WKT, WKB Shapefile PostGIS GeoTiff HDF5  衛星  衛星総覧 気象変動観測衛星しきさい Suomi-NPP JPSS1(NOAA20)  センサー  VIIRS SAR  衛星情報解析サービス  Google Earth Engine Tellus  企業  Orbital Insight  地図サービス JapanMapCompare\n日本の地図サービスの画像を比較できる\n"},{"idx":9,"href":"/notebook/gis/r_package/","title":"GIS関連Rパッケージ","content":"GIS関係のRパッケージの一覧  https://cran.r-project.org/web/views/Spatial.html https://cran.r-project.org/web/views/SpatioTemporal.html https://www.r-spatial.org/  一般   sp：地理空間のクラスやメソッドを提供している\n  sf : OGC Simple Featuresという標準に従って開発されている。sfパッケージの公式サイト、OGCが定義するファイル形式の読み書き（WKT, WKB）\n  starts : 多次元arrayで時空間データを表現\n  raster : ラスターデータの可視化と分析\n  spatial.tools : rasterを拡張して並列計算など\n  rgdal : GDALライブラリがサポートするラスターデータ, OGRライブラリがサポートするベクターデータへのバインディング、GeoJSON や Shapefile の読み書き、 PROJ.4がサポートする投影法\n  rgeos : Geometry Engine - Open Source (\u0026lsquo;GEOS\u0026rsquo;)ライブラリへのバインディング\n  GISTools : 空間データをマッピングしたり加工したり\n  metR : 気象関係のデータの扱いを容易にするパッケージらしい\n  データの読み書き  maps : mapdata, mapproj パッケージと共に地理空間データベースを提供 maptools : ESRI ArcGIS/ArcView shapefiles の読み書きなど、地理情報オブジェクトの扱い、GSHHGの海岸線データベースへのアクセス？？ shapefiles : ESRI ArcGIS/ArcView shapefiles の読み書き rpostgis : PostGISが有効化されたPostgreSQLへのコネクション rgrass7 : GRASS v7 とのコネクション RQGIS : RからQGISの機能を利用する  データの取得  geosapi : GeoServerのAPIからデータを取得する？ geonapi : GeoNetworkのAPIからデータを取得する？ rgbif : Global Biodiversity Information Facility (GBIF) にあるデータへのアクセス rnaturalearth : よく使う地図データをRからすぐにアクセスできるようにする sp, sf オブジェクトで提供  計算  lwgeom : PostGISで使われている liblwgeom へのバインディング gdalUtils : GDAL Utilityへのラッパー？ gdistance : grid間の距離やルートを計算する？ geosphere : 距離、面積、角度などの計算？ cshapes : 距離行列の計算 spsurvey : 地理的調査のためのサンプリング手法など？ trip : 動物のトラッキングデータ分析 magclass : 時空間解析 taRifx : ユーティリティ関数 geoaxe : オブジェクトを小さく分割する lawn : Turfjs ブラウザの地理空間解析ライブラリのクライアント rcosmo : 球体に対する計算を提供 areal : Areal Weighted Interpolation の実装  データのエラー調査  landsat : 衛星画像の補正？ cleangeo : 空間オブジェクトのエラーの調査？  カラーパレット  RColorBrewer : Mapでいい感じのカラーパレットを提供 viridis : 視覚障害者にも優しいカラーパレットを提供 classInt : １次元の変数の値を階級に分けるのに使う？？  可視化  ggspatial : ggplot2で可視化する時の便利ツール rasterVis : rasterの可視化 quickmapr : sp, sfオブジェクトをとりあえず可視化できる cartography : いろんな地図作成？ mapmisc : 軽量な地図作成？  可視化ウェブ  mapView, leaflet, leafletR インタラクティブな地図の可視化 RgoogleMaps : Googleマップに問い合わせしたり、Googleマップの画像を背景にしたプロットを描く plotGoogleMaps : Googleマップに描画する plotKML : オブジェクトをKMLで書き出してGoogle Earthで読み込めるようにする？？ ggmap : Google MapやOpen Street Map に描画する？ mapedit : Shinyでleafletで書いた地図を編集できるようにする？？  Cartograms 地図を変形させる可視化？ cartogram : 面積を風船のように伸び縮みさせる\nPoint Pattern Analysis  spatial, spatstat spatgraphs : 点のパターンのグラフ解析  空間統計  gstat, geoR, geoRglm : 統計量、統計モデル？ vardiag : Variogram を書く  Disease mapping and areal data analysis https://cran.r-project.org/web/views/Spatial.html\nSpatial regression https://cran.r-project.org/web/views/Spatial.html\nEcological analysis https://cran.r-project.org/web/views/Spatial.html\n"},{"idx":10,"href":"/notebook/mac/","title":"Mac","content":"Mac 便利なツール QuickLookプラグイン 以下のGithubレポジトリに開発者にとって便利な様々なQuickLookプラグインが紹介されている。どれも homebrew でインストールできるので簡単\nsindresorhus/quick-look-plugins\n"},{"idx":11,"href":"/notebook/maritime/","title":"Maritime","content":"海事関係 リンク  Asia Maritime Transparency Initiative: 各国  I think it\u0026rsquo;s good practice to keep code, data and the resulting documents in the same place,　and keep always working in that folder.\n"},{"idx":12,"href":"/notebook/gcp/bigquery/","title":"BigQuery","content":"BigQuery WebUI キーボードショートカット Mac の場合は Ctrl の代わりに Cmd にする\n   キー アクション     Ctrl Enter 現在のクエリを実行   Tab 現在の単語をオートコンプリート   選択 Tab 選択範囲のインデントを上げる   選択 Shift Tab 選択範囲のインデントを下げる   Ctrl テーブル名をハイライト表示   Ctrl テーブル名をクリック テーブル スキーマを開く   Ctrl E 選択項目からクエリを実行   Ctrl / 選択行をコメントアウト   Ctrl Shift F クエリを書式設定    Web IU のキーボードショートカット\nSQL レギュラーSQLをデフォルトにする クエリの前に #standardSQL の記述を追加する。逆にレガシーにしたい場合は #legacySQL を記述する。\n#standardSQL SELECT weight_pounds, state, year, gestation_weeks FROM `bigquery-public-data.samples.natality` ORDER BY weight_pounds DESC LIMIT 10; .bigqueryrc に以下を記述\n[query] --use_legacy_sql=false [mk] --use_legacy_sql=false 基本文法  標準SQLの演算子 標準SQLの関数と演算子  実数を丸める関数  ROUND() CEILING() FLOOR() TRUNC()  丸め関数の挙動\n行の抽出 WHERE column IN( sub_query ) 列の値が、サブクエリの出力結果と同じ値をもつ行だけを抽出する\nSELECT * FROM tableA WHERE item IN ( SELECT product FROM tableB ) WHERE EXISTS( sub_query ) サブクエリのなかのwhere句で抽出したいレコードの条件を指定する。\nSELECT * FROM tableA WHERE EXISTS ( SELECT product FROM tableB WHERE tableA.item = tableB.product AND tableA.price = tableB.price ) bq コマンド Data set を作成する bq mk \\ --dataset \\ --location=US \\ --default_table_expiration 3600 \\ --default_partition_expiration 3600 \\ --description 'description' \\ project_id:dataset_name  location US など default_table_expiration テーブル自動削除までの秒数を指定する、デフォルトでは 3600 、0に設定すると自動削除しない default_partition_expiration テーブルに対するパーティションの自動削除までの秒数 description データセットの説明、' か \u0026quot; で括る project_id:dataset_name プロジェクトIDと、作成するデータセットの名前  クエリを実行する  bq query "},{"idx":13,"href":"/notebook/gcp/bigquery_gis/","title":"BigQuery","content":"BigQuery GIS 標準 SQL の地理関数\nST_CONTAINS ST_CONTAINS(geography_1, geography_2) geography_2 は geography_1 の内部にある（外にはみ出していない）なら TRUE\nST_WITHIN ST_WITHIN(geography_1, geography_2) geography_1 は geography_2 の内部にある（外にはみ出していない）なら TRUE\nST_CONTAINS とは geography_1 と geography_2 の順序が逆になっている\n"},{"idx":14,"href":"/notebook/miscellaneous/jupyter/","title":"jupyter","content":"Visual Studio Code ショートカット jupyter の起動\n 起動しているサーバーのリスト jupyter notebook list "},{"idx":15,"href":"/notebook/miscellaneous/vscode/","title":"vscode","content":"Visual Studio Code ショートカット ショートカットエディタ Preferences \u0026gt;\u0026gt; Keyboard Shortcuts\n【Mac版】 VSCode キーボードショートカット\n コマンドパレット shift cmd P タブの移動 opt cmd → 単語単位でカーソル移動 opt →  正規表現検索・置換 検索置換のショートカット opt cmd F\n検索BOXの横の .* ボタンを押す\n正規表現の記号    記号 意味 例     ^ 行頭    $ 行末    . 任意の１文字    .* 任意の１文字が0文字以上連続する    .+ 任意の１文字が１文字以上連続する    [] []内の任意の１文字 [ABC]+ AまたはBまたはCが1文字以上連続する    検索で認識された文字列を置換の際に使う 検索BOXで正規表現を()でくくり、置換BOXの中で$1や$2で指定する。\n検索BOX： 「(.+)と(.+)」\n置換BOX： 【$1】が【$2】\n"},{"idx":16,"href":"/notebook/mac/homebrew/","title":"homebrew","content":"homebrew 基本コマンド brew search [TEXT|/REGEX/]\nbrew info [FORMULA...]\nbrew install FORMULA\nbrew update\nbrew upgrade [FORMULA...]\nbrew uninstall FORMULA...\nbrew list [FORMULA...]\nインストール先： /usr/local/Cellar\nもう少し詳細には：　/usr/local/Cellar/パッケージ名/バージョン\n"},{"idx":17,"href":"/notebook/miscellaneous/hugo/","title":"Hugo","content":"Hugo Hugoはマークダウンから静的サイトのためのhtmlを生成するソフトウェア\n Hugoフォルダの構成  \u0008/contents フォルダの中にサイトの内容を記述したマークダウン形式のファイルを配置する。\nマークダウンの内容の先頭には、ファイルの情報を記述する（YAML、TOML、JSONのいずれかの形式）。\n"},{"idx":18,"href":"/notebook/gcp/","title":"BigQuery","content":"Google Cloud Platform  BigQuery  "},{"idx":19,"href":"/notebook/r/rhdf5/","title":"rhdf5","content":"rhdf5 HDF5形式のファイルを扱うためのパッケージ\nCRANにはなく bioconductor のパッケージらしいので、bioconductor のレポジトリからインストールする\nrhdf5 - HDF5 interface for R\nインストール install.packages(\u0026quot;BiocManager\u0026quot;) BiocManager::install(\u0026quot;rhdf5\u0026quot;) 基本的な関数 ファイルの構造を表示する h5ls(\u0026quot;myhdf5file.h5\u0026quot;) ファイルの中身を読み取る D = h5read(\u0026quot;myhdf5file.h5\u0026quot;,\u0026quot;foo/A\u0026quot;) ファイルを開く h5f = H5Fopen(\u0026quot;myhdf5file.h5\u0026quot;) # アクセス h5f$df "},{"idx":20,"href":"/notebook/r/ggplot2/","title":"ggplot2","content":"ggplot2 ggplot2: Elegant Graphics for Data Analysis\n基本的な使い方 使い方の例\nset.seed(7) data_df \u0026lt;- data.frame( var1 = 1:10, var2 = rnorm(10), var3 = rep(LETTERS[1:3], length.out = 10)) ggplot(data = data_df) + geom_point(aes(x = var1, y = var2, color = var3)) + geom_line(aes(x = var1, y = var2, color = var3)) ggplot() 関数で ggplot オブジェクトを作成し、その ggplot オブジェクトに対して、 + 演算子を使って作図したいグラフの種類（geom_*() 関数）を指定する。 geom_*() 関数の中で aes() 関数を使って作図に使用する変数を指定する。\nggplot() ggplot(data = NULL, mapping = aes(), ...)  data : プロットしたいデータを含むデータフレームを渡す。データフレームは tidydata の形式になっていることが想定されている。 mapping : 作図に使用する列名を aes() 関数を介して指定する。 例 : aes(x = longitude, y = latitude, color = height, fill = height)  geom_*() グラフの種類ごとに geom_*() 関数が存在する\nちなみに geom は geometry （ジオメトリ）の略、グラフの基礎となる構造を指定する\ngeom_line() geom_point() aes() aes() 関数は、 ggplot() や geom_*() の中で使う。具体的には aes() の出力を ggplot() や geom_*() の　mapping 引数に渡す。基本的には geom_*() 関数の中で使うのが一般的。\naes() 関数は、散布図や折れ線などのグラフの座標（x, y）や線の色（color）、塗りつぶしの色（fill）、サイズ (size) などに 「使用する列」 を指定する。\nちなみに aes　は aesthetic（エステティック） の略、軸や色の指定に使用する変数を指定する\n# 都市の位置（ longitude, latitude）に点をプロット # 都市名 (city) で色分け # 点のサイズは人口 (population) に比例 data(data_df) + geom_point(aes(x = longitude, y = latitude, color = city, size = population)) グラフの種類: geom_*() geom は geometry （ジオメトリ）の略、グラフの基礎となる構造を指定する\n散布図 geom_point() 折れ線 geom_line() 経路 geom_path() ヒストグラム 連続変数 x の値のビンごとの度数、頻度を、棒グラフ、曲線、折線で描画する\ngeom_histogram() # 棒グラフ geom_density() # なめらかな曲線 geom_freqpoly() # 折線 いずれの geom_* でも、aes() の中で y を指定することで縦軸をカウント ..count.. 、密度（%） ..density.. のどちらにも対応できる\ngeom_histogram(aes(x, y = ..density..)) geom_density( aes(x, y = ..count.. )) 色分けした変数の位置\nposition = \u0026quot;identity\u0026quot; # 重ね描き position = \u0026quot;stack\u0026quot; # 積み上げ position = \u0026quot;dodge\u0026quot;` # 隣接 position = \u0026quot;fill\u0026quot; # 割合 ビンの切り方: star_bin()\n次の２つの書き方は等価らしい\ngeom_histgram(aes(x), binwidth = 0.1) geom_histgram(aes(x)) + stat_bin(binwidth = 0.1) geom_histogram() geom_density() geom_freqpoly() は stat_bin() の引数をあらかじめ指定した特殊なバージョンらしい\nstat_bin() の binwidth から下の引数は geom_* の中で指定できる。\nstat_bin( mapping = NULL, data = NULL, geom = \u0026quot;bar\u0026quot;, position = \u0026quot;stack\u0026quot;, ..., binwidth = NULL, bins = NULL, center = NULL, boundary = NULL, breaks = NULL, closed = c(\u0026quot;right\u0026quot;, \u0026quot;left\u0026quot;), pad = FALSE, na.rm = FALSE, orientation = NA, show.legend = NA, inherit.aes = TRUE ) x が離散変数なら stat_count() の方がいい\n棒グラフ ggplot(df, aes(x = cell, y = weight, fill = sample)) g \u0026lt;- g + geom_bar(stat = \u0026quot;identity\u0026quot;) 箱ひげ図・バイオリンプロット 線分 多角形 色の指定 色分けに使用する変数は aes() の中で aes(color = var1, fill = var2) のように指定する。\ncolor に対しては scale_color_gradient()\nfill に対しては scale_fill_gradient()\nをそれぞれ使用する。\n連続値に対する色つけ : scale_*_gradient 連続値: integer, numeric\ninteger は factor にしないと離散値とはみなされない\nscale_colour_gradient(..., low = \u0026quot;#132B43\u0026quot;, high = \u0026quot;#56B1F7\u0026quot;, space = \u0026quot;Lab\u0026quot;, na.value = \u0026quot;grey50\u0026quot;, guide = \u0026quot;colourbar\u0026quot;, aesthetics = \u0026quot;colour\u0026quot;) scale_fill_gradient(..., low = \u0026quot;#132B43\u0026quot;, high = \u0026quot;#56B1F7\u0026quot;, space = \u0026quot;Lab\u0026quot;, na.value = \u0026quot;grey50\u0026quot;, guide = \u0026quot;colourbar\u0026quot;, aesthetics = \u0026quot;fill\u0026quot;) scale_colour_gradient2(..., low = muted(\u0026quot;red\u0026quot;), mid = \u0026quot;white\u0026quot;, high = muted(\u0026quot;blue\u0026quot;), midpoint = 0, space = \u0026quot;Lab\u0026quot;, na.value = \u0026quot;grey50\u0026quot;, guide = \u0026quot;colourbar\u0026quot;, aesthetics = \u0026quot;colour\u0026quot;) scale_fill_gradient2(..., low = muted(\u0026quot;red\u0026quot;), mid = \u0026quot;white\u0026quot;, high = muted(\u0026quot;blue\u0026quot;), midpoint = 0, space = \u0026quot;Lab\u0026quot;, na.value = \u0026quot;grey50\u0026quot;, guide = \u0026quot;colourbar\u0026quot;, aesthetics = \u0026quot;fill\u0026quot;) scale_colour_gradientn(..., colours, values = NULL, space = \u0026quot;Lab\u0026quot;, na.value = \u0026quot;grey50\u0026quot;, guide = \u0026quot;colourbar\u0026quot;, aesthetics = \u0026quot;colour\u0026quot;, colors) scale_fill_gradientn(..., colours, values = NULL, space = \u0026quot;Lab\u0026quot;, na.value = \u0026quot;grey50\u0026quot;, guide = \u0026quot;colourbar\u0026quot;, aesthetics = \u0026quot;fill\u0026quot;, colors) 離散値に対する色つけ 離散値: character, factor\ninteger は factor にしないと離散値とはみなされない\n複数のカラーパレットを使用する ggnewscale::new_scale() 軸の名前、目盛り、ラベル 軸の名前 xlab(), ylab(), labs() p + xlab(\u0026quot;Age in years\u0026quot;) + ylab(\u0026quot;Height in inches\u0026quot;) p + labs(x = \u0026quot;Age in years\u0026quot;, y = \u0026quot;Height in inches\u0026quot;) scale_x_continuous() 軸の変換 geom_barやgeom_histgramでの軸の変換\n凡例 特定の凡例（colour）を消す１\nguides(colour=FALSE) 特定の凡例（colour）を消す２\nscale_colour_discrete(guide=FALSE) 全ての凡例を消す\ntheme(legend.position = \u0026#39;none\u0026#39;) 画像として保存する : ggsave() gsave( filename, plot = last_plot(), device = NULL, path = NULL, scale = 1, width = NA, height = NA, units = c(\u0026quot;in\u0026quot;, \u0026quot;cm\u0026quot;, \u0026quot;mm\u0026quot;), dpi = 300, limitsize = TRUE, ...)  filename : ファイル名、拡張子で出力形式は自動で判別される plot : ggplotオブジェクト、デフォルトでは最後にプロットしたものが使われる device : 出力形式：\u0026ldquo;eps\u0026rdquo;, \u0026ldquo;ps\u0026rdquo;, \u0026ldquo;tex\u0026rdquo; (pictex), \u0026ldquo;pdf\u0026rdquo;, \u0026ldquo;jpeg\u0026rdquo;, \u0026ldquo;tiff\u0026rdquo;, \u0026ldquo;png\u0026rdquo;, \u0026ldquo;bmp\u0026rdquo;, \u0026ldquo;svg\u0026rdquo; or \u0026ldquo;wmf\u0026rdquo; (windows only) path : 保存先のパス filename と合体する scale\t: 指定した出力サイズを scale 倍する width : 幅 height : 高さ units : 幅と高さの単位 (\u0026ldquo;in\u0026rdquo;, \u0026ldquo;cm\u0026rdquo;, \u0026ldquo;mm\u0026rdquo;) dpi : ラスター画像の解像度 dot per inch、文字列でも指定できる \u0026ldquo;retina\u0026rdquo; (320), \u0026ldquo;print\u0026rdquo; (300), or \u0026ldquo;screen\u0026rdquo; (72) limitsize : TRUE だと 50x50インチより大きいサイズでプロットしない、エラーを防ぐため  複数の図をまとめる patchwork パッケージを使うのが楽ちん\nhttps://qiita.com/nozma/items/4512623bea296ccb74ba\n基本的には + 演算子で複数の ggplot オブジェクトを1つにまとめる\nlibrary(ggplot2) library(patchwork) p1 \u0026lt;- ggplot(mtcars) + geom_point(aes(mpg, disp)) p2 \u0026lt;- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear)) p1 + p2 レイアウトの調整は plot_layout() 関数を使う\nplot_layout(ncol = 1, heights = c(3, 1)) 間隔を開けたいときは plot_spacer()\np1 + plot_spacer() + p2 特定の変数の値を使って図を分離する facet_grid() や facet_wrap() を使う\nfacet_grid() は図を2次元に配置する\np \u0026lt;- ggplot(diamonds, aes(x=carat, y=price)) p + geom_point(aes(colour=clarity)) + facet_grid(. ~ color) "},{"idx":21,"href":"/notebook/miscellaneous/git/","title":"git","content":"Git Gitの基本コマンド\n.gitignoreの仕様詳解\nレポジトリを作成する、コピーする init : 既存のフォルダをレポジトリにする git init して登録されたフォルダが、大元のレポジトリになる？\n他の人は、このレポジトリをクローンすることで、開発に参加できる\nclone : 既存のレポジトリをコピーする 既にあるレポジトリの内容をコピーして、ローカルにレポジトリのクローンを作成する\nこのクローンに、変更を加えることで、元レポジトリの開発に参加できる\n既にあるレポジトリへの操作 add 作成したファイルを git の管理下に追加する（ステージングする）。一度追加したら同じファイルを再度追加する必要はない\ngit add path_to_file git add . # カレント以下の全てのファイル git add *.java # 拡張子が .java commit ステージングしたファイルの変更内容を記録する（コミットする）\ngit commit -m 'コメント' push リモートレポジトリに反映する 現状のローカルレポジトリの最新 コミット 状態を、リモートレポジトリに反映する（プッシュする）\ngit push レポジトリ ブランチ 例：git origin master\nブランチの作成 : branch git branch ブランチ名 # ブランチの作成 git checkout -b ブランチ名 #ブランチの作成とそのブランチへの切り替え ブランチの切り替え : checkout ブランチを切り替えると、フォルダの中身の状態が、その\ngit checkout ブランチ名 ファイル/フォルダを特定のコミットの状態に戻す git checkout [コミット番号] [ファイルパス] ローカルで削除したファイル・フォルダを、リモートレポジトリからも削除する ローカルフォルダには、ファイルやフォルダがあっても、リモートレポジトリにはアップロードされないようにしたい。 既に、リモートレポジトリにアップロードされてしまったファイル・フォルダを、リモートレポジトリから削除したい\n 後から、.gitignore に追加削除した場合 .gitignore の内容と関係なく、後から、特定のファイル・フォルダを除外したい場合  .gitignore に新たにファイルやフォルダを追加した場合も同じ\nあるいは、以前は追跡していたファイル・フォルダの追跡をやめて、リモートレポジトリから削除したい場合\n# .gitignore に追加した後、あるいは、ファイルやフォルダを削除した後 # キャッシュを削除する git rm --cached /path/to/消したいファイル.txt git rm --cached -r /path/to/消したいフォルダ # .gitignore を編集したなら git add .gitignore # git status # コミット git commit -m \u0026quot;remove some files\u0026quot; # リモートに反映 git push origin master Githubへのプルリク プルリク（pull request）は git ではなく Github や Gitlab における概念\n初心者向けGithubへのPullRequest方法\nリモートリポジトリをローカルに clone する。\ngit clone https://github.com/teuder/test.git\n【cloneされたリモートリポジトリ】 = 【origin リポジトリ】\n"},{"idx":22,"href":"/notebook/r/raster/","title":"raster","content":"raster # GooTiffの読み込み data \u0026lt;- raster::raster(\u0026quot;path/data.tif\u0026quot;) 値と座標のデータフレームに変換する\ndf \u0026lt;- raster::rasterToPoint(data) 緯度経度と値のデータフレームからラスタデータを作成する test \u0026lt;- raster::rasterize(x = data[c(\u0026quot;lon\u0026quot;,\u0026quot;lat\u0026quot;)], # データフレームの経度、緯度のカラムの指定、n行2列の行列でもいい y = raster::raster(ncols=32512, nrows=24576), # 雛形となるラスタオブジェクト（ピクセル数を指定する） field = data$rad, # 値のベクター fun = mean, # セルに複数の点が含まれるとき、セルの値を計算する関数 filename = \u0026quot;./output/peru_20190828_32512_24576.tif\u0026quot; # ファイル出力も一緒にやる場合 ) #raster::writeRaster(test, \u0026quot;./output/peru_20190828_4608_6096.tif\u0026quot;, overwrite=TRUE) 関数 rasterize ## S4 method for signature 'matrix,Raster' rasterize(x, y, field, fun='last', background=NA, mask=FALSE, update=FALSE, updateValue='all', filename=\u0026quot;\u0026quot;, na.rm=TRUE, ...) ## S4 method for signature 'SpatialPoints,Raster' rasterize(x, y, field, fun='last', background=NA, mask=FALSE, update=FALSE, updateValue='all', filename=\u0026quot;\u0026quot;, na.rm=TRUE, ...) ## S4 method for signature 'SpatialLines,Raster' rasterize(x, y, field, fun='last', background=NA, mask=FALSE, update=FALSE, updateValue='all', filename=\u0026quot;\u0026quot;, ...) ## S4 method for signature 'SpatialPolygons,Raster' rasterize(x, y, field, fun='last', background=NA, mask=FALSE, update=FALSE, updateValue='all', filename=\u0026quot;\u0026quot;, getCover=FALSE, silent=TRUE, ...) ラスタの各セルに、空間データオブジェクト（点、線、ポリゴン）と紐づいた値を、付与する。\nポリゴン：ポリゴンがセルの中心に被っていたら値が転送される。線：その線と触れているセル全てに値が転送される。この挙動を、ポリゴンを線としてラスタ化した後で、ポリゴンをポリゴンとしてラスタ化することで、合体させることができる？？\nxが点を表す場合、各点がセルと紐づく。セル同士の境界に点が落ちる場合は右側あるいは下側のセルに配置される。セルに付与される値は、点の値と関数　fun により決定される。\nx 各セルに値を転送したい地物のオブジェクト 点を表すオブジェクト（SpatialPointsオブジェクト、２列行列、２列データフレーム）、 SpatialLinesオブジェクト、 SpatialPolygons*オブジェクト、 あるいはその拡張オブジェクト\ny 値を転送したいラスタオブジェクト（Raster*）（既存のラスタオブジェクト）\nfield 数値あるいは文字列。ラスタに転送する値。スカラ値、あるいは、数値ベクター（長さはxの地物の数と同じ） x が Spatial*DataFrame の場合は、カラム名を指定することができる。 指定しない場合、その属性インデックスが\nIf missing, the attribute index is used (i.e. numbers from 1 to the number of features). You can also provide a vector with the same length as the number of spatial features, or a matrix where the number of rows matches the number of spatial features\nfun function or character. To determine what values to assign to cells that are covered by multiple spatial features. You can use functions such as min, max, or mean, or one of the following character values: \u0026lsquo;first\u0026rsquo;, \u0026lsquo;last\u0026rsquo;, \u0026lsquo;count\u0026rsquo;. The default value is \u0026lsquo;last\u0026rsquo;. In the case of SpatialLines*, \u0026lsquo;length\u0026rsquo; is also allowed (currently for planar coordinate systems only).\nIf x represents points, fun must accept a na.rm argument, either explicitly or through \u0026lsquo;dots\u0026rsquo;. This means that fun=length fails, but fun=function(x,\u0026hellip;)length(x) works, although it ignores the na.rm argument. To use the na.rm argument you can use a function like this: fun=function(x, na.rm)if (na.rm) length(na.omit(x)) else (length(x), or use a function that removes NA values in all cases, like this function to compute the number of unique values per grid cell \u0026ldquo;richness\u0026rdquo;: fun=function(x, \u0026hellip;) {length(unique(na.omit(x)))} . If you want to count the number of points in each grid cell, you can use fun='count\u0026rsquo; or fun=function(x,\u0026hellip;){length(x)}.\nYou can also pass multiple functions using a statement like fun=function(x, \u0026hellip;) c(length(x),mean(x)), in which case the returned object is a RasterBrick (multiple layers).\nbackground numeric. Value to put in the cells that are not covered by any of the features of x. Default is NA\nmask logical. If TRUE the values of the input Raster object are \u0026lsquo;masked\u0026rsquo; by the spatial features of x. That is, cells that spatially overlap with the spatial features retain their values, the other cells become NA. Default is FALSE. This option cannot be used when update=TRUE\nupdate logical. If TRUE, the values of the Raster* object are updated for the cells that overlap the spatial features of x. Default is FALSE. Cannot be used when mask=TRUE\nupdateValue numeric (normally an integer), or character. Only relevant when update=TRUE. Select, by their values, the cells to be updated with the values of the spatial features. Valid character values are \u0026lsquo;all\u0026rsquo;, \u0026lsquo;NA\u0026rsquo;, and \u0026lsquo;!NA\u0026rsquo;. Default is \u0026lsquo;all\u0026rsquo;\nfilename character. Output filename (optional)\nna.rm If TRUE, NA values are removed if fun honors the na.rm argument\ngetCover logical. If TRUE, the fraction of each grid cell that is covered by the polygons is returned (and the values of field, fun, mask, and update are ignored. The fraction covered is estimated by dividing each cell into 100 subcells and determining presence/absence of the polygon in the center of each subcell\nsilent Logical. If TRUE, feedback on the polygon count is suppressed. Default is FALSE\n\u0026hellip; Additional arguments for file writing as for writeRaster\n"},{"idx":23,"href":"/notebook/r/sf/","title":"sf","content":"sf 定義されたクラス  sfg ：個別の地物オブジェクト sfc ： sfg オブジェクトのリスト、リストの各要素が１地物に相当 sf ： sfc オブジェクトを geometry 列としてもつデータフレーム、１行が１地物、 geometory 列以外の列は地物がもつ値  地物（sfgオブジェクト）の型  POINT：点 LINESTRING：線分 POLYGON：多角形 MULTIPOINT：点の集合 MULTILINESTRING：線分の集合 GEOMETORYCOLLECTION：様々な型のデータの集合  sfオブジェクトの読み込み・書き出し https://r-spatial.github.io/sf/articles/sf2.html\npref_simple_sf \u0026lt;- sf::st_read(\u0026#34;../output/pref_simple.shp\u0026#34;) sf::st_write(pref_simple_sf, \u0026#34;../output/pref_simple.shp\u0026#34;, layer_options = \u0026#34;ENCODING=UTF-8\u0026#34;) sf オブジェクトの作成 データフレームから作成する : st_as_sf() １行が１点を表すデータフレーム df （緯度 lat 経度 lon）から sf オブジェクトを作成する。coords = c(\u0026quot;lon\u0026quot;, \u0026quot;lat\u0026quot;)、はXY座標に相当するカラム名を指定している。crs = 4326 で座標参照系を設定している。EPSGコード 4326 は WGS84 を表す。 remove = FALSE は coords = c(\u0026quot;lon\u0026quot;, \u0026quot;lat\u0026quot;) で指定した列を削除しないという意味。\n# df は 各行が1POINTを表していて、その座標が \u0026quot;lon\u0026quot;, \u0026quot;lat\u0026quot; という列名で保持されているデータフレーム sf \u0026lt;- df %\u0026gt;% st_as_sf(coords = c(\u0026quot;lon\u0026quot;, \u0026quot;lat\u0026quot;), dim = \u0026quot;XY\u0026quot;, remove = FALSE, crs = 4326) データフレームから作成する : st_set_geometry() すでにある sfc オブジェクトを、データフレームに、geometry 列として追加する。\ndata_sf \u0026lt;- st_set_geometry(data_df, geom_sfc)\nWKT形式のテキストから作成 area_wkt \u0026lt;- \u0026#34;Polygon ((165.06947186552821449 48.95836601433594382, 169.89568502076190271 45.13709077274640435, -149.95899646070347444 44.98161022438796408, -149.95031841566071762 53.86930346517581114, -163.23108263759604597 52.2378116240458894, -168.71541576854343703 50.45207289660321948, 164.95978520290927349 51.55926363240160981, 165.06947186552821449 48.95836601433594382))\u0026#34; # SFC の作成 target_sfc \u0026lt;- sf::st_as_sfc(area_wkt, crs=4326) # SFC から　SF への変換 # st_set_geometry()を使った方法 # この方法ならsfcの列の名前が x になる target_sf \u0026lt;- sf::st_as_sf(target_sfc) # st_set_geometry()を使った方法 # この方法ならsfcの列の名前が geometry になる data_df \u0026lt;- tibble::tibble(data=1) target_sf \u0026lt;- st_set_geometry(data_df, target_sfc) 処理関数 sfオブジェクトの切り抜き st_crop() \nland_crop \u0026lt;- st_crop(land, c(xmax=180, xmin=-180, ymin = -80, ymax=80)) 日付変更線で地物に切れ目を作る -180:180 の経度で作成された地物は、日付変更線をまたいでいるときにうまく描画・処理できない。そこで、日付変更線のラインで地物を分断する。\nsf::st_wrap_dateline(options = c(\u0026quot;WRAPDATELINE=YES\u0026quot;, \u0026quot;DATELINEOFFSET=0\u0026quot;), quiet = FALSE) 日付変更線の切れ目をつなぐ https://stackoverflow.com/questions/56146735/visual-bug-when-changing-robinson-projections-central-meridian-with-ggplot2/56155662#56155662\n型の変換 地物の型の変換 st_cast()\nsf を data.frame に変換する sfオブジェクトをデータフレームに変換する（この時、df には geometry 列（リスト列=sfcオブジェクト）が残る）\ndata_df \u0026lt;- as.data.frame(data_sf) sf オブジェクトから geometory 列を削除すると、ただのデータフレームになる。そのために、st_set_geometry() はデータフレームにgeometry列をくっつける関数だけど、NULLを渡すとsfオブジェクトからgeomeotry列を削除できる。\ndf \u0026lt;- st_set_geometry(data_sf, NULL)\nWKT形式に変換する lwgeom::st_astext(x, digits = options(\u0026quot;digits\u0026quot;), ..., EWKT = FALSE) lwgeom::st_asewkt(x, digits = options(\u0026quot;digits\u0026quot;)) 地物同士の位置関係の判定 predicate whether x touches/contains/within/ y\nsparse=FALSE にすると論理値ベクトルを返す。\nst_intersects(x, y, sparse = TRUE, ...)\nst_disjoint(x, y = x, sparse = TRUE, prepared = TRUE)\nst_touches(x, y, sparse = TRUE, prepared = TRUE)\nst_crosses(x, y, sparse = TRUE, prepared = TRUE)\nst_within(x, y, sparse = TRUE, prepared = TRUE)\nst_contains(x, y, sparse = TRUE, prepared = TRUE)\nst_contains_properly(x, y, sparse = TRUE, prepared = TRUE)\nst_overlaps(x, y, sparse = TRUE, prepared = TRUE)\nst_equals(x, y, sparse = TRUE, prepared = FALSE)\nst_covers(x, y, sparse = TRUE, prepared = TRUE)\nst_covered_by(x, y, sparse = TRUE, prepared = TRUE)\nst_equals_exact(x, y, par, sparse = TRUE, prepared = FALSE)\nst_is_within_distance(x, y, dist, sparse = TRUE)\nsf::st_wrap_dateline(options = c(\u0026ldquo;WRAPDATELINE=YES\u0026rdquo;, \u0026ldquo;DATELINEOFFSET=180\u0026rdquo;), quiet = FALSE)\nggplot2 プロット時に投影図法を指定する\nlibrary(sf) library(ggplot2) land \u0026lt;- read_sf(\u0026#34;data/ne_10m_land/ne_10m_land.shp\u0026#34;) land_crop \u0026lt;- st_crop(land, c(xmax=180, xmin=-180, ymin = -80, ymax=80)) ggplot(land_crop)+ geom_sf()+ #coord_sf(crs = sf::st_crs(\u0026#39;+proj=moll\u0026#39;)) # モルワイデ図法 coord_sf(crs = sf::st_crs(\u0026#39;+proj=wag6\u0026#39;)) # Wagner VI projection 30 day map challenge Twitter の #30DayMapChallenge で地理情報可視化の例がたくさんある\nR の sf \u0026amp; ggplot メインで挑戦した人がBookdownでまとめてくれている\nhttps://twitter.com/tjukanov/status/1187713840550744066\nhttps://rud.is/books/30-day-map-challenge/\nデータベースへの読み書き https://r-spatial.github.io/sf/articles/sf2.html\n"},{"idx":24,"href":"/notebook/r/bigrquery/","title":"bigrquery","content":"bigrquery R から BigQuery を操作するためのパッケージ\nds \u0026lt;- DBI::dbConnect( drv = bigrquery::bigquery(), project = \u0026quot;project_name\u0026quot;, dataset = \u0026quot;dataset_name\u0026quot;, use_legacy_sql = FALSE ) ds \u0026lt;- bq_dataset( project = \u0026quot;project_name\u0026quot;, dataset = \u0026quot;dataset_name\u0026quot;,) "},{"idx":25,"href":"/notebook/r/dplyr/","title":"dplyr","content":"dplyr データフレームに対する操作\n列の選択 行の選択 行の並べ替え グループ化 集計 レコード数のカウント 以下の3つは同じ結果を返す\ndf %\u0026gt;% group_by(x) %\u0026gt;% summarize(n = n()) df %\u0026gt;% group_by(x) %\u0026gt;% tally() df %\u0026gt;% count(x) add_count() と add_tally() は、上の例の summarize() を mutate() に変えたもの、元の df の行数は変えずにグループごとのカウント列を追加する\ndf %\u0026gt;% group_by(x) %\u0026gt;% mutate(n = n()) df %\u0026gt;% group_by(x) %\u0026gt;% add_tally() df %\u0026gt;% add_count(x) "},{"idx":26,"href":"/notebook/r/future/","title":"future","content":"future future パッケージは１つのPC内での並列計算、および、複数PCをまたいだ分散計算を実行するためのパッケージ\n"},{"idx":27,"href":"/notebook/r/gganimate/","title":"gganimate","content":"gganimate transition_manual() コマ撮りアニメのように、１枚１枚のコマが切り替わるようなアニメーション\ntransition_manual(frames, ..., cumulative = FALSE)  frames でコマ分けに使いたいカラムを指定する。 cumulative = TRUE なら前のコマに重ねて次のコマを描画する  また、次の変数が定義される\n previous_frame 前のフレームの値 current_frame 現在のフレームの値 next_frame 次のフレームの値  使用例\nanim \u0026lt;- ggplot(mtcars, aes(factor(gear), mpg)) + geom_boxplot() + transition_manual(gear) + ggtitle('Now showing {current_frame}') transition_states() コマとコマの間を補完する画像（データ）を生成する\ntransition_states(states, transition_length = 1, state_length = 1, wrap = TRUE)  states ベースとなるコマ分けに使用するカラム transition_length ベースとなるコマとコマの間で、補完されるコマを表示する相対的な長さ state_length ベースとなるコマを表示する相対的な長さ wrap アニメーションを循環させるか、TRUE なら最後のコマは最初のコマに遷移する  "},{"idx":28,"href":"/notebook/r/lubridate/","title":"lubridate","content":"lubridate 日付を扱うパッケージ\n文字列から　Date, POSIXct オブジェクトの生成 ymd(..., quiet = FALSE, tz = NULL, locale = Sys.getlocale(\u0026quot;LC_TIME\u0026quot;), truncated = 0) ymd_hms(..., quiet = FALSE, tz = \u0026quot;UTC\u0026quot;, locale = Sys.getlocale(\u0026quot;LC_TIME\u0026quot;), truncated = 0) ymd_hm(..., quiet = FALSE, tz = \u0026quot;UTC\u0026quot;, locale = Sys.getlocale(\u0026quot;LC_TIME\u0026quot;), truncated = 0) ymd_h(..., quiet = FALSE, tz = \u0026quot;UTC\u0026quot;, locale = Sys.getlocale(\u0026quot;LC_TIME\u0026quot;), truncated = 0) 他にも\nタイムゾーン tz() tz(x) tz(x) \u0026lt;- value 日付・時刻オブジェクト x について設定されたタイムゾーンを出力する。\n日付・時刻オブジェクト x のタイムゾーンを変更する。この結果、下の例のように「xの絶対的な時刻が変化する」ことに注意する。\n\u0026ldquo;2016-04-19 16:49:00 UTC\u0026rdquo; → \u0026ldquo;2016-04-19 16:49:00 JST\u0026rdquo;\nx \u0026lt;- ymd_hms(\u0026#34;2016-04-19 16:49:00\u0026#34;, tz=\u0026#34;UTC\u0026#34;) print(x) # [1] \u0026#34;2016-04-19 16:49:00 UTC\u0026#34; tz(x) \u0026lt;- \u0026#34;Japan\u0026#34; # [1] \u0026#34;2016-04-19 16:49:00 JST\u0026#34; with_tz() with_tz(time, tzone = \u0026quot;\u0026quot;) time で指定された特定の絶対時刻について、tzone で指定したタイムゾーンでのローカル時刻を表示する。\nこの場合、time 元の絶対的な時刻は変化しない\nx \u0026lt;- ymd_hms(\u0026#34;2016-04-19 16:49:00\u0026#34;, tz=\u0026#34;UTC\u0026#34;) print(x) # [1] \u0026#34;2016-04-19 16:49:00 UTC\u0026#34; with_tz(x, tz = \u0026#34;Japan\u0026#34;) # [1] \u0026#34;2016-04-20 01:49:00 JST\u0026#34; "},{"idx":29,"href":"/notebook/r/purrr/","title":"purrr","content":"purrr ベクトルやリストなどの各要素に対する繰り返し処理\n基本関数 map_*\nmap2_*\nreduce()\naccumulate\nその他関数 pmap\npartial\nデータフレームの各行に対する繰り返し "},{"idx":30,"href":"/notebook/r/reticulate/","title":"reticulate","content":"reticulate R から Python を呼び出すためのパッケージ\n使用する Python を指定する .Rprofile で RETICULATE_PYTHON 環境変数に、使用するPythonを指定するのが安全\nSys.setenv(RETICULATE_PYTHON = '/usr/local/bin/python3') "},{"idx":31,"href":"/notebook/r/rmarkdown/","title":"Rmarkdown","content":"Rmarkdown Rmarkdown (.Rmd) から、html などに出力するパッケージは２つある\nknitr と rmarkdown、rmarkdown は内部で knitr を使用している。rmarkdown は knitr の後継となるべく開発されているのかも知れない。\nドキュメント  公式: R Markdown: The Definitive Guide rmarkdownパッケージで楽々ドキュメント生成  用語  chunk YAMLヘッダ  出力形式の指定 公式 2.4 Output formats\n.Rmd ファイルの先頭の YAML ヘッダの output: セクションに記述する\n--- title: \u0026quot;Title of this document\u0026quot; output: rmarkdown::github_document --- output: で指定できるオプションは以下の通り\n html_document github_document pdf_document word_document latex_document md_document odt_document rtf_document context_document powerpoint_presentation beamer_presentation ioslides_presentation slidy_presentation  出力先の変更 デフォルトでは .Rmd ファイルと同じフォルダに出力される。\nrmarkdown::render() を使って出力する場合には、以下のようにする。\nrmarkdown::render('my.Rmd', output_file = 'folder/my.html') RStudio の Knit ボタンを押したときの出力先を指定するには .Rmd ファイルの先頭の YAML ヘッダの knit: セクションに以下のように output_dir を指定する。パスの指定は .Rmd ファイルからの相対パス。\n--- title: \u0026quot;Title of this document\u0026quot; output: rmarkdown::github_document knit: (function(inputFile, encoding) { rmarkdown::render(inputFile, encoding = encoding, output_dir = \u0026quot;../share/markdown\u0026quot;) }) --- "},{"idx":32,"href":"/notebook/r/rpart/","title":"rpart","content":"rpart 決定木\nrpart.object\nhttps://rdrr.io/cran/rpart/man/rpart.object.html\nrpart() による学習結果のオブジェクト\nrpart.object の要素\n frame: データフレーム、tree を表現する  var: 分割に使用される変数、\u0026lt;leaf\u0026gt; は末端ノード n wt dev yval complexity ncompete nsurrogate yval2   where: 整数ベクトル、訓練データのレコード数と同じ長さ。訓練データの各レコードがどのリーフに落ちたかを表す。値は frame の行番号 call: このオブジェクトを作成するときに記述されたRコードのイメージ terms: terms.object フォーミュラをサマライズしたもの、ユーザーは基本使わない splits: 分割を記述する matrix。列は、\u0026ldquo;count\u0026rdquo; \u0026ldquo;ncat\u0026rdquo; \u0026ldquo;improve\u0026rdquo; \u0026ldquo;index\u0026rdquo; \u0026ldquo;adj\u0026rdquo;、各行は分割に使われる変数名 csplit: 整数行列、少なくとも１つの分割変数が factor である場合に作成される method: 文字列、(\u0026ldquo;class\u0026rdquo;, \u0026ldquo;exp\u0026rdquo;, \u0026ldquo;poisson\u0026rdquo;, \u0026ldquo;anova\u0026rdquo; or \u0026ldquo;user\u0026quot;のうちのどれか)、この tree を作成するときに使われた方法 cptable: 数値行列、complexityパラメタに基づいて決定された最適な枝刈りの情報？ 列名 \u0026ldquo;CP\u0026rdquo; \u0026ldquo;nsplit\u0026rdquo; \u0026ldquo;rel error\u0026rdquo; \u0026ldquo;xerror\u0026rdquo; \u0026ldquo;xstd\u0026rdquo; variable.importance: 名前付きベクトル、変数重要度、 numresp: 整数スカラー、目的変数の値の数、factorのレベルの数 parms: 学習時に与えられたパラメタの値 control: 学習時に与えられたパラメタの値 functions: rpartオブジェクトのMethodとして使われる関数 summary(), print() and text() ordered: 名前付き論理ベクトル、要素名は変数名、値はその変数が順序付きfactorであるかを表す na.action: stats::model.frame から返される値、NA の取り扱いを決める  rpart.object の属性 attributes()\n xlevels: 説明変数にある factor 型のレベル ylevels: 目的変数の factor 型のレベル  rpart:::predict.rpart() rpart.object を使って predict() したときに呼び出されるメソッド\nhttps://www.rdocumentation.org/packages/rpart/versions/4.1-15/topics/predict.rpart\npredict(object, newdata, type = c(\u0026quot;vector\u0026quot;, \u0026quot;prob\u0026quot;, \u0026quot;class\u0026quot;, \u0026quot;matrix\u0026quot;), na.action = na.pass, …) type: 分類ではデフォルトは prob クラス確率, class なら予測された目的変数 (facor) の値、vector なら目的変数 factor の levels 属性の要素番号、回帰の場合は デフォルトは vector で目的変数の値（多分）\ntyppe=\u0026quot;vector\u0026quot;　の時は、rpart.object$frame$yval の値が返されるらしい（各データが落ちたリーフの yval の値） これを使ってリーフ番号を取得できる\nrpart関係の別のライブラリ  rpart.plot itree: rpartの拡張らしい、rpartの作者もかかわっている treeClust  rpart.plot::rpart.predict() 新しいデータに対して予測する\nrpart::predict.rpart() と同じだが、予測値のノード番号とルールを出力できる\nrpart.plot::rpart.predict(object, newdata, type = c(\u0026quot;vector\u0026quot;, \u0026quot;prob\u0026quot;, \u0026quot;class\u0026quot;, \u0026quot;matrix\u0026quot;), na.action = na.pass, nn=FALSE, rules=FALSE, ...)  nn: TRUE なら ノード番号の列も返す rules: TRUE なら、ルールを文字列で記述した列も返す ...: rpart.rules() に渡される引数、例えば clip.facs=TRUE  rpart.plot::rpart.rules rpart.object から 各リーフに至るルールを表示する\nrpart.rules(x = stop(\u0026quot;no 'x' argument\u0026quot;), style = \u0026quot;wide\u0026quot;, cover = FALSE, nn = FALSE, roundint = TRUE, clip.facs = FALSE, varorder = NULL, ...) しかし、リーフの最大値は1000に制限されているので、それ以上に複雑なtreeのルールを生成したいときは、パッケージをいじる必要がある\nrpart.plot/R/rpart.rules.R の中の maxrules \u0026lt;- 1e3 をもっと大きい値に書き換える\nそして、ローカルのソースからインストールする install.packages(\u0026quot;./rpart.plot/\u0026quot;, type=\u0026quot;source\u0026quot;, repos = NULL)\nstyle = \u0026ldquo;tall\u0026rdquo;\n出力される値（class c(\u0026quot;rpart.rules\u0026quot;, \u0026quot;data.frame\u0026quot;)）\n target : 分類：クラス確率の文字列  行名: おそらく rpart.object$frame の行名に対応する？\ntreeClust::rpart.predict.leaves() rpart.predict.leaves(rp, newdata, type = \u0026quot;where\u0026quot;)  type  \u0026quot;where\u0026quot; : \u0026ldquo;rpart.object\u0026rdquo; の要素 frame の行番号を返す \u0026quot;leaf\u0026quot; : 実際のリーフ番号（frame の行名）を返す    "},{"idx":33,"href":"/notebook/r/rstudio/","title":"RStudio","content":"RStudio インストール WSL の Ubuntu 18.04 にインストール Ubuntuの場合と同じ、事前に Rをインストールしておく\nsudo apt-get install gdebi-core wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-1.3.959-amd64.deb sudo gdebi rstudio-server-1.3.959-amd64.deb しかし、次のようなエラーが出た\n$sudo gdebi rstudio-server-1.3.959-amd64.deb Traceback (most recent call last): File \u0026quot;/usr/bin/gdebi\u0026quot;, line 38, in \u0026lt;module\u0026gt; from GDebi.GDebiCli import GDebiCli File \u0026quot;/usr/share/gdebi/GDebi/GDebiCli.py\u0026quot;, line 103 def get_dependencies_info(self): ロケールを設定して再度インストールして解決\nexport LC_ALL=en_US.UTF-8 RStudio Server の起動 sudo service rstudio-server start その後、ブラウザから http://localhost:8787/ にアクセスする\nおまけ\nWSLにインストールしたRStudio Serverの起動を楽にする\nRStudio Server のアップデート RStudio Server のパージョンを新しくする\n実行中のRセッションの確認\nsudo rstudio-server active-sessions 実行中のRセッションの停止\nsudo rstudio-server suspend-all オフラインモードにする\nsudo rstudio-server offline 新しいバージョンのRStudio Serverをインストール\nDownload RStudio Server\nsudo gdebi \u0026lt;rstudio-server-package.deb\u0026gt; # or sudo yum install --nogpgcheck \u0026lt;rstudio-server-package.rpm\u0026gt; アップデートしたサーバーを再起動\nsudo rstudio-server restart sudo rstudio-server online "},{"idx":34,"href":"/notebook/r/stars/","title":"stars","content":"stars 時空間のハイパーキューブを扱うためのパッケージらしい\nstars\nsfオブジェクトをラスター化する\nst_rasterize(sf, template = st_as_stars(st_bbox(sf), values = NA_real_, ...), file = tempfile(), driver = \u0026quot;GTiff\u0026quot;, options = character(0), ...)   template : ラスターのグリッドを指定する\n st_as_stars(.x = st_bbox(sf), nx = 4064, ny = 3232,values = NA_real_) .x にはバウンディングボックスを指定する nx, ny には縦横のグリッドの数 value は欠測値を埋める    SELECT date ,id_eog ,id_fra ,lon ,lat ,rad ,Lon_DNB ,Lat_DNB ,Rad_DNB ,distance ,IF(distance \u0026lt; 100, 1, 0) AS match_flg FROM scratch_masaki.eog_fra_distance_info_ecs\n "},{"idx":35,"href":"/notebook/miscellaneous/","title":"miscellaneous","content":"miscellaneous tmux : ターミナル多重化\n"},{"idx":36,"href":"/notebook/python/environment/","title":"environment","content":"Python 環境設定 https://www.medi-08-data-06.work/entry/python_env\nPython 本体のインストールとバージョン管理 pyenv python本体のバージョン管理、インストール\nイントールと設定 brew install pyenv ~/.zshrc などに以下の記述を追加\nexport PYENV_ROOT=\u0026quot;$HOME/.pyenv\u0026quot; export PATH=\u0026quot;$PYENV_ROOT/bin:$PATH\u0026quot; eval \u0026quot;$(pyenv init -)\u0026quot; pyenv を使ったPython本体のインストール pyenv を使ったPython本体のインストール方法\n# 2系の最新版のバージョン番号を取得 python2=$(pyenv install -l | grep -v '[a-zA-Z]' | grep -e '\\s2\\.?*' | tail -1) # 3.6系の最新版のバージョン番号を取得 python36=$(pyenv install -l | grep -v '[a-zA-Z]' | grep -e '\\s3\\.6?*' | tail -1) # 3.7系の最新版のバージョン番号を取得 python37=$(pyenv install -l | grep -v '[a-zA-Z]' | grep -e '\\s3\\.7?*' | tail -1) # 3.8系の最新版のバージョン番号を取得 python38=$(pyenv install -l | grep -v '[a-zA-Z]' | grep -e '\\s3\\.8?*' | tail -1) # pipenvを使ってインストール pyenv install $python2 pyenv install $python36 pyenv install $python37 # python2 python3 のデフォルトのバージョンに指定 # ログアウトしても引き継がれる pyenv global $python2 $python37 pyenv global $python36 pyenv rehash pipenv Python パッケージのパッケージのインストール、バージョンの切替を行う。\n使いたい Python インタープリタのバージョンは指定することができる、\npipenv から python インタープリタのインストール・アンインストール、バージョンの切替を行うために、pipenv は pyenv を利用する。\n参考リンク：pyenv、pyenv-virtualenv、venv、Anaconda、Pipenv。私はPipenvを使う。\nインストール brew install pipenv pipenv 使い方 基本的には１つのプロジェクトを１つのフォルダとして、そのフォルダの中で python環境（pythonインタープリタのバージョン、パッケージのバージョン）をインストールし、使用されている Python のバージョン、パッケージのバージョンを記録するファイル Pipfile を生成する。Pipfile.lock にはパッケージの依存関係を記録している。\nプロジェクトフォルダの中に Pipfile Pipfile.lock があれば、そのファイルをもとに pipenv install で、他の人がそのプロジェクトに必要なバージョンの Python とパッケージを再現することができる。\nプロジェクトと環境の作成 プロジェクト用のフォルダを作成し、移動する\nmkdir myproject cd myproject python のバージョンを指定して、このプロジェクトのための使用するPythonバージョンをを宣言する。この時 pyenv がインストール＆設定されていれば自動でインストールされる。\npipenv --python 3.7.6 # 下記のような指定も可能 # Python 3を使う場合 # pipenv --three # Python 2を使う場合 # pipenv --two これにより Pipfile が作成される\n既存の Pipfile Pipfile.lock を参照して、Pythonとパッケージをインストールする\n環境の中に入る 環境が作成されたプロジェクトフォルダに移動して、環境の中に入る\npipenv shell 開発向けに何かインストールする\npipenv install --dev autopep8 インストール済パッケージを列挙\npipenv graph 古いパッケージを探す\npipenv update --outdated 古いパッケージを更新\npipenv update jupyter のインストール プロジェクトフォルダに移動して\npipenv install jupyter jupytext jupytext は jupyter をもっと便利にするツールらしい\njupytext を使用可能にする jupyter の設定ファイル（~/.jupyter/jupyter_notebook_config.py）を生成\npipenv run jupyter notebook --generate-config ~/.jupyter/jupyter_notebook_config.py に以下の記述を追加\n# jupytext を使用可能にする設定 c.NotebookApp.contents_manager_class = \u0026quot;jupytext.TextFileContentsManager\u0026quot; # jupytext で python コードと jupyter が連動するようにする設定 c.ContentsManager.default_jupytext_formats = \u0026quot;ipynb,py\u0026quot; 既存のnotebookを編集する場合 jupyter の Edit \u0026gt; Edit Notebook Metadata から、以下の記述を先頭に追加する。\n\u0026quot;jupytext\u0026quot;: {\u0026quot;formats\u0026quot;: \u0026quot;ipynb,py\u0026quot;}, .py, .ipynb 以外にも、md, Rmd, jl, R などのフォーマットが使えるらしい\n既存の notebook のメタデータを上記のように編集し、上書き保存すると .ipynb に対応する .py が生成されている。\n.ipynb を編集すると .py に変更が反映され、.py を編集すると .ipynb に変更が反映されるらしい。\njupyter を起動する pipenv run jupyter notebook pip パッケージのインストール先 pipでインストールされたパッケージのインストール先の確認\npip show [パッケージ名] [user@local] /usr/local/bin/pip3 show matplotlib Name: matplotlib Version: 3.1.2 Summary: Python plotting package Home-page: https://matplotlib.org Author: John D. Hunter, Michael Droettboom Author-email: matplotlib-users@python.org License: PSF Location: /usr/local/lib/python3.7/site-packages Requires: pyparsing, cycler, python-dateutil, kiwisolver, numpy Required-by: Pythonパッケージの検索先 パッケージの検索先の確認法 import sys import pprint # print() より見やすい pprint.pprint(sys.path) インストールされている Python\n/usr/bin/python3 /usr/local/bin/python3 /usr/local/opt/python/bin/python3.7 $HOME/.pyenv/versions/3.7.6/bin/python3.7 Mac 標準の python3\n/usr/bin/python3\nPython 3.7.3 (default, Dec 13 2019, 19:58:14) [Clang 11.0.0 (clang-1100.0.33.17)] on darwin ['', '/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python37.zip', '/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7', '/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/lib-dynload', '/Users/tsuda/Library/Python/3.7/lib/python/site-packages', '/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/site-packages'] Homebrew でいれた Python3\n/usr/local/bin/python3\nPython 3.7.4 (default, Sep 7 2019, 18:27:02) [Clang 10.0.1 (clang-1001.0.46.4)] on darwin ['', '/usr/local/Cellar/python/3.7.4_1/Frameworks/Python.framework/Versions/3.7/lib/python37.zip', '/usr/local/Cellar/python/3.7.4_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7', '/usr/local/Cellar/python/3.7.4_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload', '/Users/tsuda/Library/Python/3.7/lib/python/site-packages', '/usr/local/lib/python3.7/site-packages', '/usr/local/lib/python3.7/site-packages/geos', '/usr/local/Cellar/numpy/1.16.4_1/libexec/nose/lib/python3.7/site-packages'] Homebrew でいれた Python3?\n/usr/local/opt/python/bin/python3.7\nPython 3.7.4 (default, Sep 7 2019, 18:27:02) [Clang 10.0.1 (clang-1001.0.46.4)] on darwin ['', '/usr/local/Cellar/python/3.7.4_1/Frameworks/Python.framework/Versions/3.7/lib/python37.zip', '/usr/local/Cellar/python/3.7.4_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7', '/usr/local/Cellar/python/3.7.4_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload', '/Users/tsuda/Library/Python/3.7/lib/python/site-packages', '/usr/local/lib/python3.7/site-packages', '/usr/local/lib/python3.7/site-packages/geos', '/usr/local/Cellar/numpy/1.16.4_1/libexec/nose/lib/python3.7/site-packages'] pyenv で入れた Python\n.pyenv/versions/3.7.6/bin/python3.7\nPython 3.7.6 (default, Mar 14 2020, 19:17:31) [Clang 11.0.0 (clang-1100.0.33.17)] on darwin ['', '/Users/tsuda/.pyenv/versions/3.7.6/lib/python37.zip', '/Users/tsuda/.pyenv/versions/3.7.6/lib/python3.7', '/Users/tsuda/.pyenv/versions/3.7.6/lib/python3.7/lib-dynload', '/Users/tsuda/.pyenv/versions/3.7.6/lib/python3.7/site-packages'] パッケージの検索先への追加 sys.path.append() を使う方法\nこれはこのときの実行限りで有効になる\n# スクリプトファイルの１階層上のディレクトリを追加 import os import sys sys.path.append(os.path.join(os.path.dirname(__file__), \u0026#39;..\u0026#39;)) PYTHONPATH に追加する方法\nPython2 と Python3 で PYTHONPATH を使い分けられない\nexport PYTHONPATH=\u0026#34;/path/to/add:$PYTHONPATH\u0026#34;` '/usr/local/lib/python3.7/site-packages', import os import sys sys.path.append('/usr/local/lib/python3.7/site-packages') "},{"idx":37,"href":"/notebook/python/vscode/","title":"Python in VScode","content":"Python in VScode VScode で Python を使う時の Tips\n参考：VS Code でPython，Jupyter を動かす\n拡張機能  Python 必須  はじめに コマンドパレットで select interpreter と入力\nVScodeと一緒に使いたい python インタープリタを選択する\n"},{"idx":38,"href":"/notebook/python/anaconda/","title":"anaconda","content":"Anaconda minoconda\nhttps://conda.io/projects/conda/en/latest/user-guide/concepts/environments.html\n"},{"idx":39,"href":"/notebook/r/dbi/","title":"DBI","content":"DBI DBIパッケージはRからデータベース（DB）とやりとりするためのインターフェースを提供している。これにより、ドライバーを切り替えるだけで、共通のインターフェースを用いて様々な種類のDBサーバーとやりとりすることができる。\nDBIパッケージはRとデータベース（DB）がやりとりするための基本的な関数を提供している。それぞれの関数の引数などは各DBのドライバーを提供している別のパッケージ（ RPostgreSQL や bigquery など）によって動作が細かく指定できるように拡張されているので、そちらのマニュアルを参照すること。\nオブジェクト DBIパッケージでは主に下の３種類のオブジェクトが登場する。\nDBIDriver: ドライバー・オブジェクト drv\n dbDriver() RSQLite::RSQLite(), RPostgreSQL::RPostgreSQL(), RMySQL::RMySQL(), bigrquery::bigquery() などの関数が返すオブジェクト  DBIConnection: DBコネクション・オブジェクト con\ndbConnect()が返すオブジェクト\nDBIResult: クエリ結果のオブジェクト res\ndbSendquery()が返すオブジェクト\nドライバ・コネクション・クエリ結果の情報：dbGetInfo() dbGetInfo()\n接続したいDBへのドライバーをを用意する DBIパッケージに対応した、各DBへのドライバを、提供するパッケージをインストールする。\n RPostgreSQL RMySQL RSQLite bigquery  ドライバを用意する。下の２つの方法は等価。\ndrv \u0026lt;- PostgreSQL() drv \u0026lt;- dbDriver(\u0026quot;PostgreSQL\u0026quot;) ドライバを閉じる：dbUnloadDriver\ndbUnloadDriver(drv) DBサーバーへ接続する：dbConnect ドライバーは例えば以下がある。各パッケージをインストールする。\n RSQLite::RSQLite() RPostgreSQL::RPostgreSQL() RMySQL::RMySQL()  例）PostgreSQLへの接続\ndrv \u0026lt;- PostgreSQL() con \u0026lt;- dbConnect(drv, host=\u0026quot;localhost\u0026quot;, user= \u0026quot;edd\u0026quot;, password=\u0026quot;.....\u0026quot;, dbname=\u0026quot;...\u0026quot;) パスワードをRのソースに直接記述するのはセキュリティ上よろしくない。ファイルに書いておいてそれを読み出すようにする。そうすればRのソースを共有する場合にも安心である。\n例えば \u0026ldquo;.pgpass\u0026rdquo; というファイルにパスワードを保存してきそれを読み出す場合\npassword \u0026lt;- scan(\u0026quot;.pgpass\u0026quot;, what=\u0026quot;\u0026quot;) 接続の設定\nPostgreSQL() は接続の設定を変えられる。\nPostgreSQL(max.con = 16, fetch.default.rec = 500, force.reload = FALSE)  max.con：最大コネクション数 fetch.default.rec：データを取得するときに一度に送信するレコード数。fetch()はこの値を利用する。 force.reload：クライアントのコードをリロードするか。イミフ  コネクションの情報を表示する summary(con) コネクションを解除する dbDisconnect(con) ## Closes the connection データフレームの内容からテーブルを作成する：dbWriteTable dbWriteTable(con, \u0026quot;iris\u0026quot;, iris, row.names=FALSE) dbWriteTable(conn, name, value, ...)  overwrite=TRUE : テーブルを上書きする append=TRUE : 新しい行を追加する  dbWriteTable(con, name = \u0026quot;sillytable\u0026quot;, #テーブル名 value = data.frame( #値 time=seq(Sys.time(), by=\u0026quot;1 day\u0026quot;, length=10), value=rnorm(10)), row.names=FALSE) テーブルのリスト：dbListTables dbListTables(con) テーブルのカラム名：dbListFields dbListFields(con, \u0026quot;iris\u0026quot;) DBのデータを取得する テーブルを指定して読み込む：dbReadTable iris1 \u0026lt;- dbReadTable(con, \u0026quot;iris\u0026quot;) クエリの結果を読み込む：dbGetQuery data \u0026lt;- dbGetQuery(con, \u0026quot;SELECT * FROM iris ORDER BY weighted DESC LIMIT 5\u0026quot;) クエリの送信とデータの取得を分離する：dbSendQuery \u0026amp; fetch 上と同様クエリの結果を取得するが、クエリの送信とデータの取得を分離する。\nクエリを送信する\nrs \u0026lt;- dbSendQuery(con, \u0026quot;SELECT * FROM iris\u0026quot;) 最初の10レコードだけ取得する\niris3.first10 \u0026lt;- fetch(rs, 10) 残りを全て取得する\niris3.rest \u0026lt;- fetch(rs, -1) fetch はカーソルを移動させながらデータを取得する。なので上記の場合には iris3.first10 と iris3.rest 合体させると全レコードになる。\nrbind(iris3.first10, iris3.rest) 【重要】ローカルとリモート確保されたリソースを開放する\ndbSendQueryの結果はリモートのリソースを消費するので必要がなくなったら dbClearResult(rs) すること。\ndbClearResult(rs) ファイルからクエリを読み込んで実行する fileName\u0026lt;-\u0026quot;test.sql\u0026quot; q\u0026lt;-readChar(fileName, file.info(fileName)$size) res \u0026lt;- dbSendQuery(con, q) クエリ結果のリソースを開放する：dbClearResult 前のクエリの結果を全て取得していないうちに、同じコネクションで、次のクエリを実行しようとしてもできない。\nrs \u0026lt;- dbSendQuery(con, \u0026quot;SELECT * FROM iris\u0026quot;) #前のクエリ rs \u0026lt;- dbSendQuery(con, \u0026quot;SELECT * FROM hoge\u0026quot;) #次のクエリ（エラー） 実行する場合には、前のクエリの結果をクリアする必要がある。\ndbClearResult(con, rs) rs \u0026lt;- dbSendQuery(con, \u0026quot;SELECT * FROM hoge\u0026quot;) #OK dbSendQuery() するとサーバーでクエリが実行され、サーバー上に結果が保存されるらしい、そのままにしておくとメモリなどのリソースを消費するので、必要なくなった結果は適宜開放する。\nテーブルを削除する：dbRemoveTable dbRemoveTable(conn,\u0026quot;table1\u0026quot;) カラム情報を表示する：dbColumnInfo(res, \u0026hellip;) dbColumnInfo(rs) ## name Sclass type len precision scale nullOK ## 1 Sepal.Length double FLOAT8 8 -1 -1 TRUE ## 2 Sepal.Width double FLOAT8 8 -1 -1 TRUE ## 3 Petal.Length double FLOAT8 8 -1 -1 TRUE ## 4 Petal.Width double FLOAT8 8 -1 -1 TRUE ## 5 Species character TEXT -1 -1 -1 TRUE 結果の元クエリを表示：dbGetStatement dbGetStatement(rs) ## [1] \u0026quot;SELECT * FROM iris\u0026quot; ローカルにあるクエリ結果のレコード数：dbGetRowCount(rs) dbGetRowCount(rs) ## [1] 10 # ... just get the first 10 records 結果のうち、ローカルに送られてきたレコード数？\nテーブルの存在を確認：dbExistsTable dbExistsTable(con, c(\u0026quot;tmp\u0026quot;,\u0026quot;test_tbl\u0026quot;)) クエリ結果オブジェクトのリスト：dbListResults 現在のコネクションでアクティブな DBIResult のリストを返す。\ndbClearResults(dbListResults(con)[[1]]) 現在開いているコネクション・オブジェクトのリスト：dbListConnections オブジェクトの型を調べる：dbDataType DBのでの例外（エラー情報）を取得する：dbGetException データ変更クエリにより影響を受ける行数：dbGetRowsAffected クエリ結果に対する処理が完了しているか？：dbHasCompleted DBオブジェクトの状態が正常かチェックする：dbIsValid "},{"idx":40,"href":"/notebook/","title":"Introduction","content":"for my personal use "}];window.bookSearch={pages:pages,idx:lunr(function(){this.ref("idx");this.field("title");this.field("content");pages.forEach(this.add,this);}),}})();