(function(){const pages=[{"idx":0,"href":"/notebook/docs/","title":"About","content":" About  Masaki E. Tsuda 津田 真樹（つだ　まさき） Twitter : teuder  "},{"idx":1,"href":"/notebook/python/","title":"Python","content":" Python "},{"idx":2,"href":"/notebook/r/","title":"R","content":" R コーディングスタイル The tidyverse style guide\nソースコードを確認 lookup パッケージ\ndevtools::install_github(\u0026quot;jimhester/lookup\u0026quot;) lookup::lookup(dplyr::summarise)  バージョン管理  RSwitch R本体のバージョン管理 https://twitter.com/hrbrmstr renv, packrat : パッケージのバージョン管理  並列計算 furrr : purrr と同様の使い方で並列に計算できる\n可視化 Data to Viz\nきになるパッケージ 可視化  gganimate : gifアニメ export : ggplotオブジェクトをパワポに変換する  オブジェクトを調べる class() typeof() mode()\nstr() attributes()\n"},{"idx":3,"href":"/notebook/gis/sar/","title":"SAR","content":" SAR 合成開口レーダ（SAR）のキホン～事例、分かること、センサ、衛星、波長～\n合成開口レーザー（SAR:Synthetic Aperture Radar）は、マイクロ波を発射し、地表で跳ね返ってきたマイクロ波をとらえるセンサ\nざらざらした表面ほど多く電波が返ってきて白くみえ、水面などつるつるした表面では電波が反射してしまうため黒く見えます。\n観測周波数（バンド）、周波数の違いによって、何に反射して跳ね返ってくるかが異なる。\nよく用いられるのは Lバンド（1〜2GHz）、 Cバンド(4〜8GHz)、Xバンド(8〜12GHz)の3つで順番に波長が短くなっていきます。\n偏波、偏光と同じで、電磁波も波の傾きがある。物体によって偏波に対する反射特性が異なるので、物体の識別に使える\n衛星に搭載されるセンサーにより、発信する電波の傾き、受信する電波の傾きが異なる\n HH : 水平偏波で電波を出して水平で受けること HV : 水平偏波で電波を出して垂直で受けること VH : 垂直偏波で電波を出して水平で受けること VV : 垂直偏波で電波を出して垂直で受けること  "},{"idx":4,"href":"/notebook/gis/terminology/","title":"用語","content":" 用語  Panchromatic PAN 白黒の画像 Multispectral カラー画像 可視光 Visible VIS 近赤外線 Near InfraRed NIR 可視光と近赤外線をまとめて VNIR バンド センサーが感受する電磁波の波長帯域、バンドによって見えるものが違う  センサー  合成開口レーダー SAR VIIRS  "},{"idx":5,"href":"/notebook/gis/viirs/","title":"VIIRS","content":" VIIRS Visible Infrared Imaging Radiometer Suite\n赤外線を含む波長光を受信するセンサー、Suomi-NPP（SNPP）, NOAA-20(JPSS-1)の２つの衛星に搭載されている。（NOAA-20とJPSS-1は同じ衛星、JPSS-1からNOAA-20に名前が変わった。）どちらの衛星もNASAとNOAAの共同プロジェクト Joint Polar Satellite System (JPSS) により打ち上げられたもの。SNPP は JPSS-1のための実験衛星という位置づけらしい。\nVIIRSを搭載した衛星は今後しばらく（2030以降まで）は運用を続けられる予定。SNPPのデータは2012年から利用可能。NOAA-20の\n SNPP VIIRS  Begginer Guide to VIIRS data  NOAA-20 VIIRS  S-NPP衛星軌道情報\n衛星が撮影した夜の地球「夜間光」がお金に変わる!? 概要と利用事例\n生データ取得 NASA CLASS  VIIRS SDR VIIRS EDS  データプロダクト・サービス  Cololad School of Mines: Earth Observation Group : VIIRS  VIIRSを利用した、夜間の焱、夜間光（月次、年次）、夜間の漁船光の検出のデータを提供している 元々はNOAAのグループだったが Cololad School of Mines に移籍した。NOAA時代のサイト https://eogdata.mines.edu/wwwdata/viirs_products/vbd/v23/global-saa/current/ https://eogdata.mines.edu/wwwdata/viirs_products/vbd/v23/global-saa/nrt/    https://payneinstitute.mines.edu/eog/viirs/\nVIIRS を利用した論文 夜間の漁船光の検出  Automatic Boat Identification System for VIIRS Low Light Imaging Data Cross-Matching VIIRS Boat Detections with Vessel Monitoring System Tracks in Indonesia  "},{"idx":6,"href":"/notebook/datascience/","title":"Data Science","content":" Data Science データ作成 drawdata.xyz\n手でグラフをお絵描きして対応するデータをダウンロードできる\n"},{"idx":7,"href":"/notebook/gis/","title":"GIS \u0026 Remote Sensing","content":" GIS \u0026amp; Remote Sensing 情報収集 ポータルサイト  JAXA 衛星利用推進サイト 宙畑 リモートセンシング技術センター  団体コミュニティ  Open Geospatial Consortium 地理情報関係の標準化団体 OSGeo.jp OSGeo4W WindowsのためにOSSのGIS関連ソフトをビルドしているらしい  学習サイト GIS  GIS基礎知識 Geocomputation with R Rでの地理情報解析の方法がめっちゃ充実、sfパッケージベース Spatial Data Science Spatio-Temporal Statistics with R Introduction to visualising spatial data in R 空間情報クラブ  リモセン  衛星観測の専門用語  データソース  MarineRegions.org 海洋関係のShapefileを公開 GeoServer GeoNetwork Natural Earth 国土数値情報 OCEAN DATA VIEWER 気象データ高度利用ポータルサイト\n GISデータ入手先一覧\n  衛星データ  NOAA CLASS -NOAA CLASS Data access tutrial LAADS DAAC G-Portal  ファイル形式  GeoJSON WKT, WKB Shapefile PostGIS GeoTiff HDF5  衛星  衛星総覧 気象変動観測衛星しきさい Suomi-NPP JPSS1(NOAA20)  センサー  VIIRS SAR  衛星情報解析サービス  Google Earth Engine Tellus  企業  Orbital Insight  地図サービス JapanMapCompare\n日本の地図サービスの画像を比較できる\n"},{"idx":8,"href":"/notebook/gis/r_package/","title":"GIS関連Rパッケージ","content":" GIS関係のRパッケージの一覧  https://cran.r-project.org/web/views/Spatial.html https://cran.r-project.org/web/views/SpatioTemporal.html https://www.r-spatial.org/  一般  sp：地理空間のクラスやメソッドを提供している sf : OGC Simple Featuresという標準に従って開発されている。sfパッケージの公式サイト、OGCが定義するファイル形式の読み書き（WKT, WKB） starts : 多次元arrayで時空間データを表現 raster : ラスターデータの可視化と分析 spatial.tools : rasterを拡張して並列計算など rgdal : GDALライブラリがサポートするラスターデータ, OGRライブラリがサポートするベクターデータへのバインディング、GeoJSON や Shapefile の読み書き、 PROJ.4がサポートする投影法 rgeos : Geometry Engine - Open Source (\u0026lsquo;GEOS\u0026rsquo;)ライブラリへのバインディング GISTools : 空間データをマッピングしたり加工したり  データの読み書き  maps : mapdata, mapproj パッケージと共に地理空間データベースを提供 maptools : ESRI ArcGIS/ArcView shapefiles の読み書きなど、地理情報オブジェクトの扱い、GSHHGの海岸線データベースへのアクセス？？ shapefiles : ESRI ArcGIS/ArcView shapefiles の読み書き rpostgis : PostGISが有効化されたPostgreSQLへのコネクション rgrass7 : GRASS v7 とのコネクション RQGIS : RからQGISの機能を利用する  データの取得  geosapi : GeoServerのAPIからデータを取得する？ geonapi : GeoNetworkのAPIからデータを取得する？ rgbif : Global Biodiversity Information Facility (GBIF) にあるデータへのアクセス  計算  lwgeom : PostGISで使われている liblwgeom へのバインディング gdalUtils : GDAL Utilityへのラッパー？ gdistance : grid間の距離やルートを計算する？ geosphere : 距離、面積、角度などの計算？ cshapes : 距離行列の計算 spsurvey : 地理的調査のためのサンプリング手法など？ trip : 動物のトラッキングデータ分析 magclass : 時空間解析 taRifx : ユーティリティ関数 geoaxe : オブジェクトを小さく分割する lawn : Turfjs ブラウザの地理空間解析ライブラリのクライアント rcosmo : 球体に対する計算を提供 areal : Areal Weighted Interpolation の実装  データのエラー調査  landsat : 衛星画像の補正？ cleangeo : 空間オブジェクトのエラーの調査？  カラーパレット  RColorBrewer : Mapでいい感じのカラーパレットを提供 viridis : 視覚障害者にも優しいカラーパレットを提供 classInt : １次元の変数の値を階級に分けるのに使う？？  可視化  ggspatial : ggplot2で可視化する時の便利ツール rasterVis : rasterの可視化 quickmapr : sp, sfオブジェクトをとりあえず可視化できる cartography : いろんな地図作成？ mapmisc : 軽量な地図作成？  可視化ウェブ  mapView, leaflet, leafletR インタラクティブな地図の可視化 RgoogleMaps : Googleマップに問い合わせしたり、Googleマップの画像を背景にしたプロットを描く plotGoogleMaps : Googleマップに描画する plotKML : オブジェクトをKMLで書き出してGoogle Earthで読み込めるようにする？？ ggmap : Google MapやOpen Street Map に描画する？ mapedit : Shinyでleafletで書いた地図を編集できるようにする？？  Cartograms 地図を変形させる可視化？ cartogram : 面積を風船のように伸び縮みさせる\nPoint Pattern Analysis  spatial, spatstat spatgraphs : 点のパターンのグラフ解析  空間統計  gstat, geoR, geoRglm : 統計量、統計モデル？ vardiag : Variogram を書く  Disease mapping and areal data analysis https://cran.r-project.org/web/views/Spatial.html\nSpatial regression https://cran.r-project.org/web/views/Spatial.html\nEcological analysis https://cran.r-project.org/web/views/Spatial.html\n"},{"idx":9,"href":"/notebook/mac/","title":"Mac","content":" Mac 便利なツール QuickLookプラグイン 以下のGithubレポジトリに開発者にとって便利な様々なQuickLookプラグインが紹介されている。どれも homebrew でインストールできるので簡単\nsindresorhus/quick-look-plugins\n"},{"idx":10,"href":"/notebook/miscellaneous/bigquery/","title":"BigQuery","content":" BigQuery レギュラーSQLをデフォルトにする クエリの前に #standardSQL の記述を追加する。逆にレガシーにしたい場合は #legacySQL を記述する。\n#standardSQL SELECT weight_pounds, state, year, gestation_weeks FROM `bigquery-public-data.samples.natality` ORDER BY weight_pounds DESC LIMIT 10; .bigqueryrc に以下を記述\n[query] --use_legacy_sql=false [mk] --use_legacy_sql=false  "},{"idx":11,"href":"/notebook/miscellaneous/vscode/","title":"vscode","content":" Visual Studio Code ショートカット ショートカットエディタ Preferences \u0026gt;\u0026gt; Keyboard Shortcuts\n【Mac版】 VSCode キーボードショートカット\n コマンドパレット shift cmd P タブの移動 opt cmd → 単語単位でカーソル移動 opt →  正規表現検索・置換 検索置換のショートカット opt cmd F\n検索BOXの横の .* ボタンを押す\n正規表現の記号    記号 意味 例     ^ 行頭    $ 行末    . 任意の１文字    .* 任意の１文字が0文字以上連続する    .+ 任意の１文字が１文字以上連続する    [] []内の任意の１文字 [ABC]+ AまたはBまたはCが1文字以上連続する    検索で認識された文字列を置換の際に使う 検索BOXで正規表現を()でくくり、置換BOXの中で$1や$2で指定する。\n検索BOX： 「(.+)と(.+)」\n置換BOX： 【$1】が【$2】\n"},{"idx":12,"href":"/notebook/mac/homebrew/","title":"homebrew","content":" homebrew 基本コマンド brew search [TEXT|/REGEX/]\nbrew info [FORMULA...]\nbrew install FORMULA\nbrew update\nbrew upgrade [FORMULA...]\nbrew uninstall FORMULA...\nbrew list [FORMULA...]\nインストール先： /usr/local/Cellar\nもう少し詳細には：　/usr/local/Cellar/パッケージ名/バージョン\n"},{"idx":13,"href":"/notebook/miscellaneous/hugo/","title":"Hugo","content":" Hugo Hugoはマークダウンから静的サイトのためのhtmlを生成するソフトウェア\n Hugoフォルダの構成  \u0008/contents フォルダの中にサイトの内容を記述したマークダウン形式のファイルを配置する。\nマークダウンの内容の先頭には、ファイルの情報を記述する（YAML、TOML、JSONのいずれかの形式）。\n"},{"idx":14,"href":"/notebook/r/rhdf5/","title":"rhdf5","content":" rhdf5 HDF5形式のファイルを扱うためのパッケージ\nCRANにはなく bioconductor のパッケージらしいので、bioconductor のレポジトリからインストールする\nrhdf5 - HDF5 interface for R\nインストール install.packages(\u0026quot;BiocManager\u0026quot;) BiocManager::install(\u0026quot;rhdf5\u0026quot;)  基本的な関数 ファイルの構造を表示する h5ls(\u0026quot;myhdf5file.h5\u0026quot;)  ファイルの中身を読み取る D = h5read(\u0026quot;myhdf5file.h5\u0026quot;,\u0026quot;foo/A\u0026quot;)  ファイルを開く h5f = H5Fopen(\u0026quot;myhdf5file.h5\u0026quot;) # アクセス h5f$df  "},{"idx":15,"href":"/notebook/r/ggplot2/","title":"ggplot2","content":" ggplot2 ggplot2: Elegant Graphics for Data Analysis\n基本 基本関数 ベース ggplot() プロットするデータを含むデータフレームを渡す、mapping 引数には、使用する変数名などを aes() 関数を介して渡す。\nggplot(data = NULL, mapping = aes(), ...)  aes() 点・線などのプロットや塗りつぶしの色などに 「使用する変数」 を指定する。ggplot() や geom_*() の mapping 変数に渡す。基本的には 各 geom_*() 関数内で指定するのが明確だと思う\naes(x, y, ...)  geom_*() 画像を保存する : ggsave() gsave( filename, plot = last_plot(), device = NULL, path = NULL, scale = 1, width = NA, height = NA, units = c(\u0026quot;in\u0026quot;, \u0026quot;cm\u0026quot;, \u0026quot;mm\u0026quot;), dpi = 300, limitsize = TRUE, ...)   filename : ファイル名、拡張子で出力形式は自動で判別される plot : プロットしたいggplotオブジェクト、デフォルトでは最後にプロットしたもの device : 出力形式：\u0026rdquo;eps\u0026rdquo;, \u0026ldquo;ps\u0026rdquo;, \u0026ldquo;tex\u0026rdquo; (pictex), \u0026ldquo;pdf\u0026rdquo;, \u0026ldquo;jpeg\u0026rdquo;, \u0026ldquo;tiff\u0026rdquo;, \u0026ldquo;png\u0026rdquo;, \u0026ldquo;bmp\u0026rdquo;, \u0026ldquo;svg\u0026rdquo; or \u0026ldquo;wmf\u0026rdquo; (windows only) path : 保存先のパス filename と合体する scale : 指定した出力サイズを scale 倍する width, height, units : 出力サイズ units (\u0026ldquo;in\u0026rdquo;, \u0026ldquo;cm\u0026rdquo;, or \u0026ldquo;mm\u0026rdquo;) dpi : ラスター画像の解像度、文字列でも指定できる \u0026ldquo;retina\u0026rdquo; (320), \u0026ldquo;print\u0026rdquo; (300), or \u0026ldquo;screen\u0026rdquo; (72) limitsize : TRUEだと 50x50インチより大きいサイズでプロットしない、エラーを防ぐため  カラーパレット 連続値に対する色つけ scale_colour_gradient() scale_colour_gradient(..., low = \u0026quot;#132B43\u0026quot;, high = \u0026quot;#56B1F7\u0026quot;, space = \u0026quot;Lab\u0026quot;, na.value = \u0026quot;grey50\u0026quot;, guide = \u0026quot;colourbar\u0026quot;, aesthetics = \u0026quot;colour\u0026quot;) scale_fill_gradient(..., low = \u0026quot;#132B43\u0026quot;, high = \u0026quot;#56B1F7\u0026quot;, space = \u0026quot;Lab\u0026quot;, na.value = \u0026quot;grey50\u0026quot;, guide = \u0026quot;colourbar\u0026quot;, aesthetics = \u0026quot;fill\u0026quot;) scale_colour_gradient2(..., low = muted(\u0026quot;red\u0026quot;), mid = \u0026quot;white\u0026quot;, high = muted(\u0026quot;blue\u0026quot;), midpoint = 0, space = \u0026quot;Lab\u0026quot;, na.value = \u0026quot;grey50\u0026quot;, guide = \u0026quot;colourbar\u0026quot;, aesthetics = \u0026quot;colour\u0026quot;) scale_fill_gradient2(..., low = muted(\u0026quot;red\u0026quot;), mid = \u0026quot;white\u0026quot;, high = muted(\u0026quot;blue\u0026quot;), midpoint = 0, space = \u0026quot;Lab\u0026quot;, na.value = \u0026quot;grey50\u0026quot;, guide = \u0026quot;colourbar\u0026quot;, aesthetics = \u0026quot;fill\u0026quot;) scale_colour_gradientn(..., colours, values = NULL, space = \u0026quot;Lab\u0026quot;, na.value = \u0026quot;grey50\u0026quot;, guide = \u0026quot;colourbar\u0026quot;, aesthetics = \u0026quot;colour\u0026quot;, colors) scale_fill_gradientn(..., colours, values = NULL, space = \u0026quot;Lab\u0026quot;, na.value = \u0026quot;grey50\u0026quot;, guide = \u0026quot;colourbar\u0026quot;, aesthetics = \u0026quot;fill\u0026quot;, colors)  離散値に対する色つけ 軸の変換 geom_barやgeom_histgramでの軸の変換\n"},{"idx":16,"href":"/notebook/miscellaneous/git/","title":"git","content":" Git Gitの基本コマンド\nブランチの作成 : branch git branch ブランチ名 # ブランチの作成 git checkout -b ブランチ名 #ブランチの作成とそのブランチへの切り替え  ブランチの切り替え : checkout git checkout ブランチ名  リモートレポジトリに反映する : push 現状のローカルレポジトリの最新 commit のフォルダの状態をリモート\ngit push レポジトリ ブランチ  例：git origin master\nGithubへのプルリク 初心者向けGithubへのPullRequest方法\nリモートリポジトリをローカルに clone する。\ngit clone https://github.com/teuder/test.git\n【cloneされたリモートリポジトリ】 = 【origin リポジトリ】\n"},{"idx":17,"href":"/notebook/r/raster/","title":"raster","content":" raster # GooTiffの読み込み data \u0026lt;- raster(\u0026#34;path/data.tif\u0026#34;) 値と座標のデータフレームに変換する\ndf \u0026lt;- rasterToPoint(data)  "},{"idx":18,"href":"/notebook/r/sf/","title":"sf","content":" sf 定義されたクラス  sfgクラス：個別の地物 sfcクラス：sfgオブジェクトのリスト、リストの各要素が１地物に相当 sf クラス：sfcオブジェクトをgeometory列としてもつデータフレーム、１行が１地物、geometory列以外の列は地物がもつ値  地物の型  POINT：点 LINESTRING：線分 POLYGON：多角形 MULTIPOINT：点の集合 MULTILINESTRING：線分の集合 GEOMETORYCOLLECTION：様々な型のデータの集合  sf オブジェクトの作成 データフレームから作成する : st_as_sf() １行が１点を表すデータフレーム df （緯度 lat 経度 lon）から sf オブジェクトを作成する。remove = FALSE は coords = c(\u0026quot;lon\u0026quot;, \u0026quot;lat\u0026quot;) で指定した列を削除しないという意味。\nその後、st_set_crs(4326) で座標参照系を設定している。EPSGコード 4326 は WGS84 を表す。\nsf \u0026lt;- df %\u0026gt;% st_as_sf(coords = c(\u0026#34;lon\u0026#34;, \u0026#34;lat\u0026#34;), dim = \u0026#34;XY\u0026#34;, remove = FALSE) %\u0026gt;% st_set_crs(4326) 処理関数 sfオブジェクトの切り抜き st_crop()\n地物の型の変換\nst_cast()\nsfオブジェクトをデータフレームに変換する（この時、dfにはgeometory列（リスト列=sfcオブジェクト）が残る）\ndf \u0026lt;- as.data.frame(data_sf)\nsfオブジェクトからgeometory列を削除すると値（=地物の属性）だけのデータフレームになる\ndf \u0026lt;- st_set_geometory(data_sf, NULL)\nst_set_geometory() はデータフレームにgeometory列をくっつける関数だけど、NULLを渡すとsfオブジェクトからgeomeotry列を削除できる。\n地物同士の位置関係の判定 predicate whether x touches/contains/within/ y\nsparse=FALSE にすると論理値ベクトルを返す。\nst_intersects(x, y, sparse = TRUE, ...)\nst_disjoint(x, y = x, sparse = TRUE, prepared = TRUE)\nst_touches(x, y, sparse = TRUE, prepared = TRUE)\nst_crosses(x, y, sparse = TRUE, prepared = TRUE)\nst_within(x, y, sparse = TRUE, prepared = TRUE)\nst_contains(x, y, sparse = TRUE, prepared = TRUE)\nst_contains_properly(x, y, sparse = TRUE, prepared = TRUE)\nst_overlaps(x, y, sparse = TRUE, prepared = TRUE)\nst_equals(x, y, sparse = TRUE, prepared = FALSE)\nst_covers(x, y, sparse = TRUE, prepared = TRUE)\nst_covered_by(x, y, sparse = TRUE, prepared = TRUE)\nst_equals_exact(x, y, par, sparse = TRUE, prepared = FALSE)\nst_is_within_distance(x, y, dist, sparse = TRUE)\n"},{"idx":19,"href":"/notebook/miscellaneous/","title":"miscellaneous","content":" miscellaneous tmux : ターミナル多重化\n"},{"idx":20,"href":"/notebook/python/anaconda/","title":"anaconda","content":" Anaconda minoconda\nhttps://conda.io/projects/conda/en/latest/user-guide/concepts/environments.html\n"},{"idx":21,"href":"/notebook/r/dbi/","title":"DBI","content":" DBI DBIパッケージはRからデータベース（DB）とやりとりするためのインターフェースを提供している。これにより、ドライバーを切り替えるだけで、共通のインターフェースを用いて様々な種類のDBサーバーとやりとりすることができる。\nDBIパッケージはRとデータベース（DB）がやりとりするための基本的な関数を提供している。それぞれの関数の引数などは各DBのドライバーを提供している別のパッケージ（ RPostgreSQL や bigquery など）によって動作が細かく指定できるように拡張されているので、そちらのマニュアルを参照すること。\nオブジェクト DBIパッケージでは主に下の３種類のオブジェクトが登場する。\nDBIDriver: ドライバー・オブジェクト drv\n dbDriver() RSQLite::RSQLite(), RPostgreSQL::RPostgreSQL(), RMySQL::RMySQL(), bigrquery::bigquery() などの関数が返すオブジェクト  DBIConnection: DBコネクション・オブジェクト con\ndbConnect()が返すオブジェクト\nDBIResult: クエリ結果のオブジェクト res\ndbSendquery()が返すオブジェクト\nドライバ・コネクション・クエリ結果の情報：dbGetInfo() dbGetInfo()\n接続したいDBへのドライバーをを用意する DBIパッケージに対応した、各DBへのドライバを、提供するパッケージをインストールする。\n RPostgreSQL RMySQL RSQLite bigquery  ドライバを用意する。下の２つの方法は等価。\ndrv \u0026lt;- PostgreSQL() drv \u0026lt;- dbDriver(\u0026quot;PostgreSQL\u0026quot;)  ドライバを閉じる：dbUnloadDriver\ndbUnloadDriver(drv)  DBサーバーへ接続する：dbConnect ドライバーは例えば以下がある。各パッケージをインストールする。\n RSQLite::RSQLite() RPostgreSQL::RPostgreSQL() RMySQL::RMySQL()  例）PostgreSQLへの接続\ndrv \u0026lt;- PostgreSQL() con \u0026lt;- dbConnect(drv, host=\u0026quot;localhost\u0026quot;, user= \u0026quot;edd\u0026quot;, password=\u0026quot;.....\u0026quot;, dbname=\u0026quot;...\u0026quot;)  パスワードをRのソースに直接記述するのはセキュリティ上よろしくない。ファイルに書いておいてそれを読み出すようにする。そうすればRのソースを共有する場合にも安心である。\n例えば \u0026ldquo;.pgpass\u0026rdquo; というファイルにパスワードを保存してきそれを読み出す場合\npassword \u0026lt;- scan(\u0026quot;.pgpass\u0026quot;, what=\u0026quot;\u0026quot;)  接続の設定\nPostgreSQL() は接続の設定を変えられる。\nPostgreSQL(max.con = 16, fetch.default.rec = 500, force.reload = FALSE)\n max.con：最大コネクション数 fetch.default.rec：データを取得するときに一度に送信するレコード数。fetch()はこの値を利用する。 force.reload：クライアントのコードをリロードするか。イミフ  コネクションの情報を表示する summary(con)\nコネクションを解除する dbDisconnect(con) ## Closes the connection\nデータフレームの内容からテーブルを作成する：dbWriteTable dbWriteTable(con, \u0026quot;iris\u0026quot;, iris, row.names=FALSE) dbWriteTable(conn, name, value, ...)   overwrite=TRUE : テーブルを上書きする append=TRUE : 新しい行を追加する\ndbWriteTable(con, name = \u0026quot;sillytable\u0026quot;, #テーブル名 value = data.frame( #値 time=seq(Sys.time(), by=\u0026quot;1 day\u0026quot;, length=10), value=rnorm(10)), row.names=FALSE)   テーブルのリスト：dbListTables dbListTables(con)\nテーブルのカラム名：dbListFields dbListFields(con, \u0026quot;iris\u0026quot;)\nDBのデータを取得する テーブルを指定して読み込む：dbReadTable iris1 \u0026lt;- dbReadTable(con, \u0026quot;iris\u0026quot;)\nクエリの結果を読み込む：dbGetQuery data \u0026lt;- dbGetQuery(con, \u0026quot;SELECT * FROM iris ORDER BY weighted DESC LIMIT 5\u0026quot;)\nクエリの送信とデータの取得を分離する：dbSendQuery \u0026amp; fetch 上と同様クエリの結果を取得するが、クエリの送信とデータの取得を分離する。\nクエリを送信する\nrs \u0026lt;- dbSendQuery(con, \u0026quot;SELECT * FROM iris\u0026quot;)\n最初の10レコードだけ取得する\niris3.first10 \u0026lt;- fetch(rs, 10)\n残りを全て取得する\niris3.rest \u0026lt;- fetch(rs, -1)\nfetch はカーソルを移動させながらデータを取得する。なので上記の場合には iris3.first10 と iris3.rest 合体させると全レコードになる。\nrbind(iris3.first10, iris3.rest)\n【重要】ローカルとリモート確保されたリソースを開放する\ndbSendQueryの結果はリモートのリソースを消費するので必要がなくなったら dbClearResult(rs) すること。\ndbClearResult(rs)\nファイルからクエリを読み込んで実行する fileName\u0026lt;-\u0026#34;test.sql\u0026#34; q\u0026lt;-readChar(fileName, file.info(fileName)$size) res \u0026lt;- dbSendQuery(con, q) クエリ結果のリソースを開放する：dbClearResult 前のクエリの結果を全て取得していないうちに、同じコネクションで、次のクエリを実行しようとしてもできない。\nrs \u0026lt;- dbSendQuery(con, \u0026#34;SELECT * FROM iris\u0026#34;) #前のクエリ rs \u0026lt;- dbSendQuery(con, \u0026#34;SELECT * FROM hoge\u0026#34;) #次のクエリ（エラー） 実行する場合には、前のクエリの結果をクリアする必要がある。\ndbClearResult(con, rs) rs \u0026lt;- dbSendQuery(con, \u0026#34;SELECT * FROM hoge\u0026#34;) #OK dbSendQuery()するとサーバーでクエリが実行され、サーバー上に結果が保存されるらしい、そのままにしておくとメモリなどのリソースを消費するので、必要なくなった結果は適宜開放する。\nテーブルを削除する：dbRemoveTable dbRemoveTable(conn,\u0026quot;table1\u0026quot;)  カラム情報を表示する：dbColumnInfo(res, \u0026hellip;) dbColumnInfo(rs) ## name Sclass type len precision scale nullOK ## 1 Sepal.Length double FLOAT8 8 -1 -1 TRUE ## 2 Sepal.Width double FLOAT8 8 -1 -1 TRUE ## 3 Petal.Length double FLOAT8 8 -1 -1 TRUE ## 4 Petal.Width double FLOAT8 8 -1 -1 TRUE ## 5 Species character TEXT -1 -1 -1 TRUE  結果の元クエリを表示：dbGetStatement dbGetStatement(rs) ## [1] \u0026quot;SELECT * FROM iris\u0026quot;  ローカルにあるクエリ結果のレコード数：dbGetRowCount(rs) dbGetRowCount(rs) ## [1] 10 # ... just get the first 10 records  結果のうち、ローカルに送られてきたレコード数？\nテーブルの存在を確認：dbExistsTable dbExistsTable(con, c(\u0026quot;tmp\u0026quot;,\u0026quot;test_tbl\u0026quot;))  クエリ結果オブジェクトのリスト：dbListResults 現在のコネクションでアクティブな DBIResult のリストを返す。\ndbClearResults(dbListResults(con)[[1]])  現在開いているコネクション・オブジェクトのリスト：dbListConnections オブジェクトの型を調べる：dbDataType DBのでの例外（エラー情報）を取得する：dbGetException データ変更クエリにより影響を受ける行数：dbGetRowsAffected クエリ結果に対する処理が完了しているか？：dbHasCompleted DBオブジェクトの状態が正常かチェックする：dbIsValid "},{"idx":22,"href":"/notebook/","title":"Introduction","content":" for my personal use "}];window.bookSearch={pages:pages,idx:lunr(function(){this.ref("idx");this.field("title");this.field("content");pages.forEach(this.add,this);}),}})();